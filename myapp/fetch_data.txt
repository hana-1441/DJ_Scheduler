pl : java
tp : java operators
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>Java <span class="color_h1">Operators</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="java_type_casting.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="java_strings.asp">Next ❯</a>
</div>
<hr>

<h2>Java Operators</h2>

<p>Operators are used to perform operations on variables and values.</p>
<p>In the example below, we use the
<code class="w3-codespan">+</code> <strong>operator</strong> to add together two values:</p>
<div class="w3-example">
<h3>Example<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/java/java_server.asp" title="W3Schools Spaces" target="_blank">Get your own Java Server</a></h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_oper">Try it Yourself »</a>
</p>
</div>

<p>Although the <code class="w3-codespan">+</code> operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> sum1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment">// 150 (100 + 50)</span>
<span class="token keyword keyword-int">int</span> sum2 <span class="token operator">=</span> sum1 <span class="token operator">+</span> <span class="token number">250</span><span class="token punctuation">;</span>      <span class="token comment">// 400 (150 + 250)</span>
<span class="token keyword keyword-int">int</span> sum3 <span class="token operator">=</span> sum2 <span class="token operator">+</span> sum2<span class="token punctuation">;</span>     <span class="token comment">// 800 (400 + 400)</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_oper2">Try it Yourself »</a>
</p>
</div>

<p>Java divides the operators into the following groups:</p>
<ul>
	<li>Arithmetic operators</li>
	<li>Assignment operators</li>
	<li>Comparison operators</li>
	<li>Logical operators</li>
	<li>Bitwise operators</li>
</ul>
<hr>

<h2>Arithmetic Operators</h2>

<p>Arithmetic operators are used to perform common mathematical operations.</p>
<div class="w3-responsive">
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:15%">Operator</th>
<th style="width:18%">Name</th>
<th style="width:40%">Description</th>
<th style="width:17%;">Example</th>
<th style="width:10%">Try it</th>
</tr>
<tr>
<td>+</td>
<td>Addition</td>
<td>Adds together two values</td>
<td>x + y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_add">Try it »</a></td>
</tr>
<tr>
<td>-</td>
<td>Subtraction</td>
<td>Subtracts one value from another</td>
<td>x - y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_sub">Try it »</a></td>
</tr>
<tr>
<td>*</td>
<td>Multiplication</td>
<td>Multiplies two values</td>
<td>x * y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_mult">Try it »</a></td>
</tr>
<tr>
<td>/</td>
<td>Division</td>
<td>Divides one value by another</td>
<td>x / y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_div">Try it »</a></td>
</tr>
<tr>
<td>%</td>
<td>Modulus</td>
<td>Returns the division remainder</td>
<td>x % y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_mod">Try it »</a></td>
</tr>
<tr>
<td>++</td>
<td>Increment</td>
<td>Increases the value of a variable by 1</td>
<td>++x</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_inc">Try it »</a></td>
</tr>
<tr>
<td>--</td>
<td>Decrement</td>
<td>Decreases the value of a variable by 1</td>
<td>--x</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_dec">Try it »</a></td>
</tr>
</tbody>
</table>
</div>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>

<h2>Java Assignment Operators</h2>

<p>Assignment operators are used to assign values to variables.</p>
<p>In the example below, we use the <strong>assignment</strong> operator (<code class="w3-codespan">=</code>) 
to assign the value <strong>10</strong> to a variable called <strong>x</strong>:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a class="w3-btn" href="tryjava.asp?filename=demo_oper_assignment1" target="_blank">Try it Yourself »</a>
</p>
</div>
<p>The <strong>addition assignment</strong> operator (<code class="w3-codespan">+=</code>) adds a value to a variable:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
x <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a class="w3-btn" href="tryjava.asp?filename=demo_oper_assignment2" target="_blank">Try it Yourself »</a>
</p>
</div>
<p>A list of all assignment operators:</p>
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:30%">Operator</th>
<th style="width:30%">Example</th>
<th style="width:30%">Same As</th>
<th style="width:10%;">Try it</th>
</tr>
<tr>
<td>=</td>
<td>x = 5</td>
<td>x = 5</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass1">Try it »</a></td>
</tr>
  <tr>
<td>+=</td>
<td>x += 3</td>
<td>x = x + 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass2">Try it »</a></td>
  </tr>
  <tr>
<td>-=</td>
<td>x -= 3</td>
<td>x = x - 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass3">Try it »</a></td>
  </tr>
  <tr>
<td>*=</td>
<td>x *= 3</td>
<td>x = x * 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass4">Try it »</a></td>
  </tr>
  <tr>
<td>/=</td>
<td>x /= 3</td>
<td>x = x / 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass5">Try it »</a></td>
  </tr>
  <tr>
<td>%=</td>
<td>x %= 3</td>
<td>x = x % 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass6">Try it »</a></td>
  </tr>
  <tr>
<td>&amp;=</td>
<td>x &amp;= 3</td>
<td>x = x &amp; 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass7">Try it »</a></td>
  </tr>
  <tr>
<td>|=</td>
<td>x |= 3</td>
<td>x = x | 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass8">Try it »</a></td>
  </tr>
<tr>
<td>^=</td>
<td>x ^= 3</td>
<td>x = x ^ 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass9">Try it »</a></td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>x &gt;&gt;= 3</td>
<td>x = x &gt;&gt; 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass10">Try it »</a></td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>x &lt;&lt;= 3</td>
<td>x = x &lt;&lt; 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass11">Try it »</a></td>
</tr>
</tbody></table>

<hr>

<h2>Java Comparison Operators</h2>

<p>Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.</p>

<p>The return value of a comparison is either <code class="w3-codespan">true</code> or <code class="w3-codespan">false</code>. These values are known as 
<em>Boolean values</em>, and you will learn more about them in the <a href="java_booleans.asp">Booleans</a> and <a href="java_conditions.asp">If..Else</a> chapter.</p>

<p>In the following example, we use the <strong>greater than</strong> operator (<code class="w3-codespan">&gt;</code>) to find out if 5 is greater than 3:</p>

<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns true, because 5 is higher than 3</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_oper_comparison">Try it Yourself »</a>
</p>
</div>


<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:25%">Operator</th>
<th style="width:35%">Name</th>
<th style="width:30%">Example</th>
<th style="width:10%">Try it</th>
</tr>
<tr>
<td>==</td>
<td>Equal to</td>
<td>x == y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare1">Try it »</a></td>
</tr>
<tr>
<td>!=</td>
<td>Not equal</td>
<td>x != y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare2">Try it »</a></td>
</tr>
<tr>
<td>&gt;</td>
<td>Greater than</td>
<td>x &gt; y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare3">Try it »</a></td>
</tr>
<tr>
<td>&lt;</td>
<td>Less than</td>
<td>x &lt; y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare4">Try it »</a></td>
</tr>
  <tr>
<td>&gt;=</td>
<td>Greater than or equal to</td>
<td>x &gt;= y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare5">Try it »</a></td>
  </tr>
<tr>
<td>&lt;=</td>
<td>Less than or equal to</td>
<td>x &lt;= y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare6">Try it »</a></td>
</tr>
</tbody></table>
<hr>

<h2>Java Logical Operators</h2>

<p>You can also test for <code class="w3-codespan">true</code> or <code class="w3-codespan">false</code> 
values with logical operators.</p>
<p>Logical operators are used to determine the logic between variables or 
values:</p>
<div class="w3-responsive" style="margin-top:-16px;margin-bottom:-16px">

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:15%">Operator</th>
<th style="width:20%">Name</th>
<th style="width:35%">Description</th>
<th style="width:20%">Example</th>
<th style="width:10%">Try it</th>
</tr>
<tr>
<td>&amp;&amp;&nbsp;</td>
<td>Logical and</td>
<td>Returns true if both statements are true</td>
<td>x &lt; 5 &amp;&amp;&nbsp; x &lt; 10</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_logical1">Try it »</a></td>
</tr>
<tr>
<td>||&nbsp;</td>
<td>Logical or</td>
<td>Returns true if one of the statements is true</td>
<td>x &lt; 5 || x &lt; 4</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_logical2">Try it »</a></td>
</tr>
<tr>
<td>!</td>
<td>Logical not</td>
<td>Reverse the result, returns false if the result is true</td>
<td>!(x &lt; 5 &amp;&amp; x &lt; 10)</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_logical3">Try it »</a></td>
</tr>
</tbody></table>
</div>
<!--

<h2>Java Bitwise Operators</h2>
<p>Bitwise operators are used to perform binary logic with the bits of an integer or long
integer.</p>
<div class="w3-responsive" style="margin-top:-16px;margin-bottom:-16px">
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th style="width:40%">Description</th>
<th>Example</th>
<th>Same as</th>
<th>Result</th>
<th>Decimal</th>
</tr>
<tr>
<td>&amp;</td>
<td>AND - Sets each bit to 1 if both bits are 1</td>
<td>5 &amp; 1</td>
<td>0101 &amp; 0001</td>
<td>0001</td>
<td>&nbsp;1</td>
</tr>
<tr>
<td>|</td>
<td>OR - Sets each bit to 1 if any of the two bits is 1</td>
<td>5 | 1</td>
<td>0101 | 0001</td>
<td>0101</td>
<td>&nbsp;5</td>
</tr>
<tr>
<td>~</td>
<td>NOT - Inverts all the bits</td>
<td>~ 5</td>
<td>&nbsp;~0101</td>
<td>1010</td>
<td>&nbsp;10</td>
</tr>
<tr>
<td>^</td>
<td>XOR - Sets each bit to 1 if only one of the two bits is 1</td>
<td>5 ^ 1</td>
<td>0101 ^ 0001</td>
<td>0100</td>
<td>&nbsp;4</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>Zero-fill left shift - Shift left by pushing zeroes in from the right and letting the leftmost bits fall off</td>
<td>9 &lt;&lt; 1</td>
<td>1001 &lt;&lt; 1</td>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>Signed right shift - Shift right by pushing copies of the leftmost bit in from the left and letting the rightmost bits fall off</td>
<td>9 &gt;&gt; 1</td>
<td>1001 &gt;&gt; 1</td>
<td>1100</td>
<td>12</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>Zero-fill right shift - Shift right by pushing zeroes in from the left and letting the rightmost bits fall off</td>
<td>9 &gt;&gt;&gt; 1</td>
<td>1001 &gt;&gt;&gt; 1</td>
<td>0100</td>
<td>4</td>
</tr>
</tbody></table>
</div>

<div class="w3-note w3-panel">
<p><strong>Note:</strong> The Bitwise examples above use 4-bit unsigned examples, but Java uses 32-bit signed integers
and 64-bit signed long integers.
Because of this, in Java, ~5 will not return 10. It will return -6.
~00000000000000000000000000000101 will return 11111111111111111111111111111010</p>

<p>In Java, 9 &gt;&gt; 1 will not return 12. It will return 4.
00000000000000000000000000001001 &gt;&gt; 1 will return
00000000000000000000000000000100</p>
</div>
-->

<hr>

<div>
<form autocomplete="off" spellcheck="false" id="w3-exerciseform" action="exercise.asp?filename=exercise_operators1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Multiply <code class="w3-codespan">10</code> with <code class="w3-codespan">5</code>, and print the result.</p>
<div class="exerciseprecontainer">
<pre style="overflow: auto;">System.out.println(10 <input name="ex1" maxlength="1" style="width: 15px;"> 5);
</pre>
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise.asp?filename=exercise_operators1">Start the Exercise</a></p>
</div>
</form>
</div>

<br>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="java_type_casting.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="java_strings.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fjava%2Fjava_operators.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : +, int x = 100 + 50;, +, int sum1 = 100 + 50;        // 150 (100 + 50)
int sum2 = sum1 + 250;      // 400 (150 + 250)
int sum3 = sum2 + sum2;     // 800 (400 + 400), =, int x = 10;, +=, int x = 10;
x += 5;, true, false, >, int x = 5;
int y = 3;
System.out.println(x > y); // returns true, because 5 is higher than 3, true, false, 10, 5
time_out : 16 : 20 : 55
pl : javascript
tp : js operators
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>JavaScript <span class="color_h1">Operators</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="js_const.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="js_arithmetic.asp">Next ❯</a>
</div>
<div class="w3-info">
<p>Javascript operators are used to perform different types of mathematical and logical computations.</p>
<h3>Examples:</h3>
<p>The <b>Assignment Operator</b> <b><span class="w3-xlarge w3-text-indigo">=</span></b> assigns values</p>
<p>The <b>Addition Operator</b> <b><span class="w3-xlarge w3-text-indigo">+</span></b> adds values</p>
<p>The <b>Multiplication Operator</b> <b><span class="w3-xlarge w3-text-indigo">*</span></b> multiplies values</p>
<p>The <b>Comparison Operator</b> <b><span class="w3-xlarge w3-text-indigo">&gt;</span></b> compares values</p>
</div>
<hr>
<h2>JavaScript Assignment</h2>
<p>The <b>Assignment Operator</b> (<code class="w3-codespan">=</code>) assigns a value to a variable:</p>
<div class="w3-example">
<h3>Assignment Examples</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">10</span>; </span></div>
<a class="w3-btn" href="tryit.asp?filename=tryjs_oper_equal" target="_blank">Try it Yourself »</a>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black"><span class="jsnumbercolor" style="color:red">
</span><span class="commentcolor" style="color:green">// Assign the value 5 to x<br></span>
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span>;<br><span class="jsnumbercolor" style="color:red">
</span><span class="commentcolor" style="color:green">// Assign the value 2 to y<br></span>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsnumbercolor" style="color:red">2</span>;<br><span class="jsnumbercolor" style="color:red">
</span><span class="commentcolor" style="color:green">// Assign the value x + y to z:<br></span>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = x + y;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a target="_blank" href="tryit.asp?filename=tryjs_oper" class="w3-btn w3-margin-bottom">Try it Yourself »</a>
</div>
<hr>
<h2>JavaScript Addition</h2>
<p>The <b>Addition Operator</b> (<code class="w3-codespan">+</code>) adds numbers:</p>
<div class="w3-example">
<h3>Adding</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsnumbercolor" style="color:red">2</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = x + y;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_add" target="_blank">Try it Yourself »</a>
</div>
<h2>JavaScript Multiplication</h2>
<p>The <b>Multiplication Operator</b> (<code class="w3-codespan">*</code>) multiplies numbers:</p>
<div class="w3-example">
<h3>Multiplying</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsnumbercolor" style="color:red">2</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = x * y;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_mult" target="_blank">Try it Yourself »</a>
</div>
<hr>

<h2>Types of JavaScript Operators</h2>
<p>There are different types of JavaScript operators:</p>
<ul>
<li>Arithmetic Operators</li>
<li>Assignment Operators</li>
<li>Comparison Operators</li>
<li>String Operators</li>
<li>Logical Operators</li>
<li>Bitwise Operators</li>
<li>Ternary Operators</li>
<li>Type Operators</li>
</ul>

<hr>
<h2>JavaScript Arithmetic Operators</h2>
<p><b>Arithmetic Operators</b> are used to perform arithmetic on numbers:</p>
<div class="w3-example">
<h3>Arithmetic Operators Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> a = <span class="jsnumbercolor" style="color:red">3</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = (<span class="jsnumbercolor" style="color:red">100</span> + <span class="jsnumbercolor" style="color:red">50</span>) * a;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_arithmetic_expressions" target="_blank">Try it Yourself »</a>
</div>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:25%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>+</td>
<td>Addition</td>
</tr>
<tr>
<td>-</td>
<td>Subtraction</td>
</tr>
<tr>
<td>*</td>
<td>Multiplication</td>
</tr>
<tr>
<td>**</td>
<td>Exponentiation (<a href="js_2016.asp">ES2016</a>)</td>
</tr>
<tr>
<td>/</td>
<td>Division</td>
</tr>
<tr>
<td>%</td>
<td>Modulus (Division Remainder)</td>
</tr>
<tr>
<td>++</td>
<td>Increment</td>
</tr>
<tr>
<td>--</td>
<td>Decrement</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Arithmetic operators are fully described in the <strong>
<a href="js_arithmetic.asp">JS Arithmetic</a></strong> chapter.</p>
</div>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>
<h2>JavaScript Assignment Operators</h2>
<p>Assignment operators assign values to JavaScript variables.</p>
<p>The <b>Addition Assignment Operator</b> (<code class="w3-codespan">+=</code>) adds a value to a variable.</p>
<div class="w3-example">
<h3>Assignment</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">10</span>;<br>x += <span class="jsnumbercolor" style="color:red">5</span>;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_plusequal" target="_blank">Try it Yourself »</a>
</div>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:25%">Operator</th>
<th>Example</th>
<th>Same As</th>
</tr>
<tr>
<td>=</td>
<td>x = y</td>
<td>x = y</td>
</tr>
<tr>
<td>+=</td>
<td>x += y</td>
<td>x = x + y</td>
</tr>
<tr>
<td>-=</td>
<td>x -= y</td>
<td>x = x - y</td>
</tr>
<tr>
<td>*=</td>
<td>x *= y</td>
<td>x = x * y</td>
</tr>
<tr>
<td>/=</td>
<td>x /= y</td>
<td>x = x / y</td>
</tr>
  <tr>
<td>%=</td>
<td>x %= y</td>
<td>x = x % y</td>
  </tr>
<tr>
<td>**=</td>
<td>x **= y</td>
<td>x = x ** y</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Assignment operators are fully described in the <strong>
<a href="js_assignment.asp">JS Assignment</a></strong> chapter.</p>
</div>
<hr>

<h2>JavaScript Comparison Operators</h2>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>==</td>
<td>equal to</td>
</tr>
<tr>
<td>===</td>
<td>equal value and equal type</td>
</tr>
<tr>
<td>!=</td>
<td>not equal</td>
</tr>
<tr>
<td>!==</td>
<td>not equal value or not equal type</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>less than or equal to</td>
</tr>
<tr>
<td>?</td>
<td>ternary operator</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Comparison operators are fully described in the <strong>
<a href="js_comparisons.asp">JS Comparisons</a></strong> chapter.</p>
</div>

<hr>
<h2>JavaScript String Comparison</h2>
<p>All the comparison operators above can also be used on strings:</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"A"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text2 = <span class="jsstringcolor" style="color:brown">"B"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> result = text1 &lt; text2;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_string_comparison" target="_blank">Try it Yourself »</a>
</div>
<p>Note that strings are compared alphabetically:</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"20"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text2 = <span class="jsstringcolor" style="color:brown">"5"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> result = text1 &lt; text2;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_string_comparison1" target="_blank">Try it Yourself »</a>
</div>


<hr>

<h2>JavaScript String Addition</h2>
<p>The <code class="w3-codespan">+</code> can also be used to add (concatenate) strings:</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"John"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text2 = <span class="jsstringcolor" style="color:brown">"Doe"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text3 = text1 + <span class="jsstringcolor" style="color:brown">" "</span> + text2;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_concatenate" target="_blank">Try it Yourself »</a>
</div>

<p>The <code class="w3-codespan">+=</code> assignment operator can also be used to add (concatenate) strings:</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"What a very "</span>;<br>
text1 += <span class="jsstringcolor" style="color:brown">"nice day"</span>; </span></div>
<p>The result of text1 will be:</p>
<div class="w3-white w3-padding notranslate">
<code>What a very nice day</code></div>
<a class="w3-btn w3-margin-bottom w3-margin-top" href="tryit.asp?filename=tryjs_oper_concat4" target="_blank">Try it Yourself »</a>
</div>
<div class="w3-panel w3-note">
<h2>Note</h2>
<p>When used on strings, the + operator is called the concatenation operator.</p>
</div>
<hr>

<h2>Adding Strings and Numbers</h2>
<p>Adding two numbers, will return the sum, but adding a number and a string will return a string:</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span> + <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsstringcolor" style="color:brown">"5"</span> + <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = <span class="jsstringcolor" style="color:brown">"Hello"</span> + <span class="jsnumbercolor" style="color:red">5</span>;<br><span class="jsnumbercolor" style="color:red">
</span> </span></div>
<p>The result of <em>x</em>,<em> y</em>, and <em>z</em> will be:</p>
<div class="w3-white w3-padding notranslate">
<code>
10<br>
55<br>
Hello5
</code>
</div>
<a class="w3-btn w3-margin-bottom w3-margin-top" href="tryit.asp?filename=tryjs_oper_concat5" target="_blank">Try it Yourself »</a>
</div>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>If you add a number and a string, the result will be a string!</p>
</div>

<hr>

<h2>JavaScript Logical Operators</h2>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>logical and</td>
</tr>
<tr>
<td>||</td>
<td>logical or</td>
</tr>
<tr>
<td>!</td>
<td>logical not</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Logical operators are fully described in the <strong>
<a href="js_comparisons.asp">JS Comparisons</a></strong> chapter.</p>
</div>

<hr>
<h2>JavaScript Type Operators</h2>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:30%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>typeof</td>
<td>Returns the type of a variable</td>
</tr>
<tr>
<td>instanceof</td>
<td>Returns true if an object is an instance of an object type</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Type operators are fully described in the <strong><a href="js_type_conversion.asp">JS Type Conversion</a></strong> chapter.</p>
</div>

<hr>

<h2>JavaScript Bitwise Operators</h2>
<p>Bit operators work on 32 bits numbers.</p>
Any numeric operand in the operation is converted into a 32 bit number.
The result is converted back to a JavaScript number.

<div class="w3-responsive">
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th style="width:25%">Description</th>
<th>Example</th>
<th>Same as</th>
<th>Result</th>
<th style="width:15%">Decimal</th>
</tr>
<tr>
<td>&amp;</td>
<td>AND</td>
<td>5 &amp; 1</td>
<td>0101 &amp; 0001</td>
<td>0001</td>
<td>&nbsp;1</td>
</tr>
<tr>
<td>|</td>
<td>OR</td>
<td>5 | 1</td>
<td>0101 | 0001</td>
<td>0101</td>
<td>&nbsp;5</td>
</tr>
<tr>
<td>~</td>
<td>NOT</td>
<td>~ 5</td>
<td>&nbsp;~0101</td>
<td>1010</td>
<td>&nbsp;10</td>
</tr>
<tr>
<td>^</td>
<td>XOR</td>
<td>5 ^ 1</td>
<td>0101 ^ 0001</td>
<td>0100</td>
<td>&nbsp;4</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>left shift</td>
<td>5 &lt;&lt; 1</td>
<td>0101 &lt;&lt; 1</td>
<td>1010</td>
<td>&nbsp;10</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>right shift</td>
<td>5 &gt;&gt; 1</td>
<td>0101 &gt;&gt; 1</td>
<td>0010</td>
<td>&nbsp; 2</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>unsigned right shift</td>
<td>5 &gt;&gt;&gt; 1</td>
<td>0101 &gt;&gt;&gt; 1</td>
<td>0010</td>
<td>&nbsp; 2</td>
</tr>
</tbody></table>
</div>


<div class="w3-container w3-note">
<p>The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.<br>
Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.<br>
~00000000000000000000000000000101 will return 11111111111111111111111111111010</p>
<p>Bitwise operators are fully described in the <a href="js_bitwise.asp"><strong>JS 
Bitwise</strong></a> chapter.</p>
</div>
<hr>

<form autocomplete="off" spellcheck="false" id="w3-exerciseform" action="exercise_js.asp?filename=exercise_js_operators1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Multiply <code class="w3-codespan">10</code> with <code class="w3-codespan">5</code>, and alert the result.</p>
<div class="exerciseprecontainer">
<pre>alert(10 <input name="ex1" maxlength="1" style="width: 15px;"> 5);
</pre>
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise_js.asp?filename=exercise_js_operators1">Start the Exercise</a></p>
</div>
</form>

<!--
<h2>Test Yourself with Exercises!</h2>
<p>
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators1" target="_blank">Exercise 1 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators2" target="_blank">Exercise 2 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators3" target="_blank">Exercise 3 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators4" target="_blank">Exercise 4 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators5" target="_blank">Exercise 5 &raquo;</a>
</p>
-->

<hr>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="js_const.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="js_arithmetic.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fjs%2Fjs_operators.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : =, +, *, +=, +, +=, What a very nice day, 10
55
Hello5, 10, 5
time_out : 16 : 21 : 20
pl : php
tp : php syntax
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>PHP <span class="color_h1">Syntax</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="php_install.asp">❮ Previous</a>
  <a class="w3-right w3-btn" href="php_comments.asp">Next ❯</a>
</div>
<hr>
<p class="intro">A PHP script is executed on the server, and the plain HTML result is sent back to the browser.</p>
<hr>

<h2>Basic PHP Syntax</h2>
<p>A PHP script can be placed anywhere in the document.</p>
<p>A PHP script starts with <code class="w3-codespan">&lt;?php</code> and ends with 
<code class="w3-codespan">?&gt;</code>:</p>

<div class="w3-example">
<pre class="notranslate w3-white language-php" tabindex="0"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// PHP code goes here</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre>
</div>

<p>The default file extension for PHP files is "<code class="w3-codespan">.php</code>".</p>
<p>A PHP file normally contains HTML tags, and some PHP scripting code.</p>
<p>Below, we have an example of a simple PHP file, with a PHP script that uses a 
built-in PHP function "<code class="w3-codespan">echo</code>" to output the text
"Hello World!" on a web page:</p>

<div class="w3-example">
<h3>Example<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/php/php_server.asp" title="W3Schools Spaces" target="_blank">Get your own PHP Server</a></h3>
<p>A simple <code class="w3-codespan">.php</code> file with both HTML code and PHP code:</p>
<pre class="notranslate w3-white language-php" tabindex="0"><code class="language-php"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My first PHP page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword keyword-echo">echo</span> <span class="token string double-quoted-string">"Hello World!"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<a target="_blank" class="w3-btn w3-margin-bottom" href="phptryit.asp?filename=tryphp_syntax">Try it Yourself »</a>
</div>
<p><strong>Note:</strong> PHP statements end with a semicolon (<code class="w3-codespan">;</code>).</p>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>

<h2>PHP Case Sensitivity</h2>
<p>In PHP, keywords (e.g. <code class="w3-codespan">if</code>, 
<code class="w3-codespan">else</code>, <code class="w3-codespan">while</code>, 
<code class="w3-codespan">echo</code>, etc.), classes, functions, 
and user-defined functions are not case-sensitive.</p>
<p>In the example below, all three echo statements below are equal and legal:</p>

<div class="w3-example">
<h3>Example</h3>
<p><code class="w3-codespan">ECHO</code> is the same as <code class="w3-codespan">echo</code>:</p>
<pre class="notranslate w3-white language-php" tabindex="0"><code class="language-php"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword keyword-ECHO">ECHO</span> <span class="token string double-quoted-string">"Hello World!&lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword keyword-echo">echo</span> <span class="token string double-quoted-string">"Hello World!&lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword keyword-EcHo">EcHo</span> <span class="token string double-quoted-string">"Hello World!&lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<a target="_blank" class="w3-btn w3-margin-bottom" href="phptryit.asp?filename=tryphp_syntax_case1">Try it Yourself »</a>
</div>

<div class="w3-note w3-panel">
<p><strong>Note:</strong> However; all variable names are case-sensitive!</p>
</div>

<p>Look at the example below; only the first statement will display the value of the 
<code class="w3-codespan">$color</code> variable! This is because 
<code class="w3-codespan">$color</code>, <code class="w3-codespan">$COLOR</code>, and 
<code class="w3-codespan">$coLOR</code> are treated as three 
different variables:</p>

<div class="w3-example">
<h3>Example</h3>
<p><code class="w3-codespan">$COLOR</code> is <em>not</em> same as <code class="w3-codespan">$color</code>:</p>
<pre class="notranslate w3-white language-php" tabindex="0"><code class="language-php"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token class-name type-declaration">php</span><span class="token variable"><br>$color</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"red"</span><span class="token punctuation">;</span>
<span class="token keyword keyword-echo">echo</span> <span class="token string double-quoted-string">"My car is "</span> <span class="token operator">.</span> <span class="token variable">$color</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword keyword-echo">echo</span> <span class="token string double-quoted-string">"My house is "</span> <span class="token operator">.</span> <span class="token variable">$COLOR</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token keyword keyword-echo">echo</span> <span class="token string double-quoted-string">"My boat is "</span> <span class="token operator">.</span> <span class="token variable">$coLOR</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<a target="_blank" class="w3-btn w3-margin-bottom" href="phptryit.asp?filename=tryphp_syntax_case2">Try it Yourself »</a>
</div>
<hr>

<h2>PHP Exercises</h2>
<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_syntax1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Insert the missing part of the code below to output "Hello World".</p>
<div class="exerciseprecontainer">
<pre><input name="ex1" maxlength="5" style="width: 54px;"> "Hello World";
</pre>
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise.asp?filename=exercise_syntax1">Start the Exercise</a></p>
</div>
</form>

<br>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="php_install.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="php_comments.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fphp%2Fphp_syntax.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : <?php, ?>, <?php
// PHP code goes here
?>, .php, echo, .php, <!DOCTYPE html>
<html>
<body>

<h1>My first PHP page</h1>

<?php
echo "Hello World!";
?>

</body>
</html>, ;, if, else, while, echo, ECHO, echo, <!DOCTYPE html>
<html>
<body>

<?php
ECHO "Hello World!<br>";
echo "Hello World!<br>";
EcHo "Hello World!<br>";
?>

</body>
</html>, $color, $color, $COLOR, $coLOR, $COLOR, $color, <!DOCTYPE html>
<html>
<body>

<?php
$color = "red";
echo "My car is " . $color . "<br>";
echo "My house is " . $COLOR . "<br>";
echo "My boat is " . $coLOR . "<br>";
?>

</body>
</html>
time_out : 16 : 21 : 38



************2024-04-01 16:22:02.266563**************

Home Function called
extracted data list pair of pl & topic : []pl : javascript
tp : js operators
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>JavaScript <span class="color_h1">Operators</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="js_const.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="js_arithmetic.asp">Next ❯</a>
</div>
<div class="w3-info">
<p>Javascript operators are used to perform different types of mathematical and logical computations.</p>
<h3>Examples:</h3>
<p>The <b>Assignment Operator</b> <b><span class="w3-xlarge w3-text-indigo">=</span></b> assigns values</p>
<p>The <b>Addition Operator</b> <b><span class="w3-xlarge w3-text-indigo">+</span></b> adds values</p>
<p>The <b>Multiplication Operator</b> <b><span class="w3-xlarge w3-text-indigo">*</span></b> multiplies values</p>
<p>The <b>Comparison Operator</b> <b><span class="w3-xlarge w3-text-indigo">&gt;</span></b> compares values</p>
</div>
<hr>
<h2>JavaScript Assignment</h2>
<p>The <b>Assignment Operator</b> (<code class="w3-codespan">=</code>) assigns a value to a variable:</p>
<div class="w3-example">
<h3>Assignment Examples</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">10</span>; </span></div>
<a class="w3-btn" href="tryit.asp?filename=tryjs_oper_equal" target="_blank">Try it Yourself »</a>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black"><span class="jsnumbercolor" style="color:red">
</span><span class="commentcolor" style="color:green">// Assign the value 5 to x<br></span>
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span>;<br><span class="jsnumbercolor" style="color:red">
</span><span class="commentcolor" style="color:green">// Assign the value 2 to y<br></span>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsnumbercolor" style="color:red">2</span>;<br><span class="jsnumbercolor" style="color:red">
</span><span class="commentcolor" style="color:green">// Assign the value x + y to z:<br></span>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = x + y;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a target="_blank" href="tryit.asp?filename=tryjs_oper" class="w3-btn w3-margin-bottom">Try it Yourself »</a>
</div>
<hr>
<h2>JavaScript Addition</h2>
<p>The <b>Addition Operator</b> (<code class="w3-codespan">+</code>) adds numbers:</p>
<div class="w3-example">
<h3>Adding</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsnumbercolor" style="color:red">2</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = x + y;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_add" target="_blank">Try it Yourself »</a>
</div>
<h2>JavaScript Multiplication</h2>
<p>The <b>Multiplication Operator</b> (<code class="w3-codespan">*</code>) multiplies numbers:</p>
<div class="w3-example">
<h3>Multiplying</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsnumbercolor" style="color:red">2</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = x * y;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_mult" target="_blank">Try it Yourself »</a>
</div>
<hr>

<h2>Types of JavaScript Operators</h2>
<p>There are different types of JavaScript operators:</p>
<ul>
<li>Arithmetic Operators</li>
<li>Assignment Operators</li>
<li>Comparison Operators</li>
<li>String Operators</li>
<li>Logical Operators</li>
<li>Bitwise Operators</li>
<li>Ternary Operators</li>
<li>Type Operators</li>
</ul>

<hr>
<h2>JavaScript Arithmetic Operators</h2>
<p><b>Arithmetic Operators</b> are used to perform arithmetic on numbers:</p>
<div class="w3-example">
<h3>Arithmetic Operators Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> a = <span class="jsnumbercolor" style="color:red">3</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = (<span class="jsnumbercolor" style="color:red">100</span> + <span class="jsnumbercolor" style="color:red">50</span>) * a;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_arithmetic_expressions" target="_blank">Try it Yourself »</a>
</div>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:25%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>+</td>
<td>Addition</td>
</tr>
<tr>
<td>-</td>
<td>Subtraction</td>
</tr>
<tr>
<td>*</td>
<td>Multiplication</td>
</tr>
<tr>
<td>**</td>
<td>Exponentiation (<a href="js_2016.asp">ES2016</a>)</td>
</tr>
<tr>
<td>/</td>
<td>Division</td>
</tr>
<tr>
<td>%</td>
<td>Modulus (Division Remainder)</td>
</tr>
<tr>
<td>++</td>
<td>Increment</td>
</tr>
<tr>
<td>--</td>
<td>Decrement</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Arithmetic operators are fully described in the <strong>
<a href="js_arithmetic.asp">JS Arithmetic</a></strong> chapter.</p>
</div>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>
<h2>JavaScript Assignment Operators</h2>
<p>Assignment operators assign values to JavaScript variables.</p>
<p>The <b>Addition Assignment Operator</b> (<code class="w3-codespan">+=</code>) adds a value to a variable.</p>
<div class="w3-example">
<h3>Assignment</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">10</span>;<br>x += <span class="jsnumbercolor" style="color:red">5</span>;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_plusequal" target="_blank">Try it Yourself »</a>
</div>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:25%">Operator</th>
<th>Example</th>
<th>Same As</th>
</tr>
<tr>
<td>=</td>
<td>x = y</td>
<td>x = y</td>
</tr>
<tr>
<td>+=</td>
<td>x += y</td>
<td>x = x + y</td>
</tr>
<tr>
<td>-=</td>
<td>x -= y</td>
<td>x = x - y</td>
</tr>
<tr>
<td>*=</td>
<td>x *= y</td>
<td>x = x * y</td>
</tr>
<tr>
<td>/=</td>
<td>x /= y</td>
<td>x = x / y</td>
</tr>
  <tr>
<td>%=</td>
<td>x %= y</td>
<td>x = x % y</td>
  </tr>
<tr>
<td>**=</td>
<td>x **= y</td>
<td>x = x ** y</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Assignment operators are fully described in the <strong>
<a href="js_assignment.asp">JS Assignment</a></strong> chapter.</p>
</div>
<hr>

<h2>JavaScript Comparison Operators</h2>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>==</td>
<td>equal to</td>
</tr>
<tr>
<td>===</td>
<td>equal value and equal type</td>
</tr>
<tr>
<td>!=</td>
<td>not equal</td>
</tr>
<tr>
<td>!==</td>
<td>not equal value or not equal type</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>less than or equal to</td>
</tr>
<tr>
<td>?</td>
<td>ternary operator</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Comparison operators are fully described in the <strong>
<a href="js_comparisons.asp">JS Comparisons</a></strong> chapter.</p>
</div>

<hr>
<h2>JavaScript String Comparison</h2>
<p>All the comparison operators above can also be used on strings:</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"A"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text2 = <span class="jsstringcolor" style="color:brown">"B"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> result = text1 &lt; text2;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_string_comparison" target="_blank">Try it Yourself »</a>
</div>
<p>Note that strings are compared alphabetically:</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"20"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text2 = <span class="jsstringcolor" style="color:brown">"5"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> result = text1 &lt; text2;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_string_comparison1" target="_blank">Try it Yourself »</a>
</div>


<hr>

<h2>JavaScript String Addition</h2>
<p>The <code class="w3-codespan">+</code> can also be used to add (concatenate) strings:</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"John"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text2 = <span class="jsstringcolor" style="color:brown">"Doe"</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> text3 = text1 + <span class="jsstringcolor" style="color:brown">" "</span> + text2;<span class="jsnumbercolor" style="color:red">
</span> </span></div>
<a class="w3-btn w3-margin-bottom" href="tryit.asp?filename=tryjs_oper_concatenate" target="_blank">Try it Yourself »</a>
</div>

<p>The <code class="w3-codespan">+=</code> assignment operator can also be used to add (concatenate) strings:</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> text1 = <span class="jsstringcolor" style="color:brown">"What a very "</span>;<br>
text1 += <span class="jsstringcolor" style="color:brown">"nice day"</span>; </span></div>
<p>The result of text1 will be:</p>
<div class="w3-white w3-padding notranslate">
<code>What a very nice day</code></div>
<a class="w3-btn w3-margin-bottom w3-margin-top" href="tryit.asp?filename=tryjs_oper_concat4" target="_blank">Try it Yourself »</a>
</div>
<div class="w3-panel w3-note">
<h2>Note</h2>
<p>When used on strings, the + operator is called the concatenation operator.</p>
</div>
<hr>

<h2>Adding Strings and Numbers</h2>
<p>Adding two numbers, will return the sum, but adding a number and a string will return a string:</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate jsHigh"><span class="jscolor" style="color:black">
<span class="jskeywordcolor" style="color:mediumblue">let</span> x = <span class="jsnumbercolor" style="color:red">5</span> + <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> y = <span class="jsstringcolor" style="color:brown">"5"</span> + <span class="jsnumbercolor" style="color:red">5</span>;<br>
<span class="jskeywordcolor" style="color:mediumblue">let</span> z = <span class="jsstringcolor" style="color:brown">"Hello"</span> + <span class="jsnumbercolor" style="color:red">5</span>;<br><span class="jsnumbercolor" style="color:red">
</span> </span></div>
<p>The result of <em>x</em>,<em> y</em>, and <em>z</em> will be:</p>
<div class="w3-white w3-padding notranslate">
<code>
10<br>
55<br>
Hello5
</code>
</div>
<a class="w3-btn w3-margin-bottom w3-margin-top" href="tryit.asp?filename=tryjs_oper_concat5" target="_blank">Try it Yourself »</a>
</div>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>If you add a number and a string, the result will be a string!</p>
</div>

<hr>

<h2>JavaScript Logical Operators</h2>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>logical and</td>
</tr>
<tr>
<td>||</td>
<td>logical or</td>
</tr>
<tr>
<td>!</td>
<td>logical not</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Logical operators are fully described in the <strong>
<a href="js_comparisons.asp">JS Comparisons</a></strong> chapter.</p>
</div>

<hr>
<h2>JavaScript Type Operators</h2>

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:30%">Operator</th>
<th>Description</th>
</tr>
<tr>
<td>typeof</td>
<td>Returns the type of a variable</td>
</tr>
<tr>
<td>instanceof</td>
<td>Returns true if an object is an instance of an object type</td>
</tr>
</tbody></table>

<div class="w3-panel w3-note">
<h2>Note</h2>
<p>Type operators are fully described in the <strong><a href="js_type_conversion.asp">JS Type Conversion</a></strong> chapter.</p>
</div>

<hr>

<h2>JavaScript Bitwise Operators</h2>
<p>Bit operators work on 32 bits numbers.</p>
Any numeric operand in the operation is converted into a 32 bit number.
The result is converted back to a JavaScript number.

<div class="w3-responsive">
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th style="width:25%">Description</th>
<th>Example</th>
<th>Same as</th>
<th>Result</th>
<th style="width:15%">Decimal</th>
</tr>
<tr>
<td>&amp;</td>
<td>AND</td>
<td>5 &amp; 1</td>
<td>0101 &amp; 0001</td>
<td>0001</td>
<td>&nbsp;1</td>
</tr>
<tr>
<td>|</td>
<td>OR</td>
<td>5 | 1</td>
<td>0101 | 0001</td>
<td>0101</td>
<td>&nbsp;5</td>
</tr>
<tr>
<td>~</td>
<td>NOT</td>
<td>~ 5</td>
<td>&nbsp;~0101</td>
<td>1010</td>
<td>&nbsp;10</td>
</tr>
<tr>
<td>^</td>
<td>XOR</td>
<td>5 ^ 1</td>
<td>0101 ^ 0001</td>
<td>0100</td>
<td>&nbsp;4</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>left shift</td>
<td>5 &lt;&lt; 1</td>
<td>0101 &lt;&lt; 1</td>
<td>1010</td>
<td>&nbsp;10</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>right shift</td>
<td>5 &gt;&gt; 1</td>
<td>0101 &gt;&gt; 1</td>
<td>0010</td>
<td>&nbsp; 2</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>unsigned right shift</td>
<td>5 &gt;&gt;&gt; 1</td>
<td>0101 &gt;&gt;&gt; 1</td>
<td>0010</td>
<td>&nbsp; 2</td>
</tr>
</tbody></table>
</div>


<div class="w3-container w3-note">
<p>The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.<br>
Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.<br>
~00000000000000000000000000000101 will return 11111111111111111111111111111010</p>
<p>Bitwise operators are fully described in the <a href="js_bitwise.asp"><strong>JS 
Bitwise</strong></a> chapter.</p>
</div>
<hr>

<form autocomplete="off" spellcheck="false" id="w3-exerciseform" action="exercise_js.asp?filename=exercise_js_operators1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Multiply <code class="w3-codespan">10</code> with <code class="w3-codespan">5</code>, and alert the result.</p>
<div class="exerciseprecontainer">
<pre>alert(10 <input name="ex1" maxlength="1" style="width: 15px;"> 5);
</pre>
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise_js.asp?filename=exercise_js_operators1">Start the Exercise</a></p>
</div>
</form>

<!--
<h2>Test Yourself with Exercises!</h2>
<p>
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators1" target="_blank">Exercise 1 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators2" target="_blank">Exercise 2 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators3" target="_blank">Exercise 3 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators4" target="_blank">Exercise 4 &raquo;</a>&nbsp;
<a class="w3-btn" href="exercise_js.asp?filename=exercise_js_operators5" target="_blank">Exercise 5 &raquo;</a>
</p>
-->

<hr>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="js_const.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="js_arithmetic.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fjs%2Fjs_operators.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : =, +, *, +=, +, +=, What a very nice day, 10
55
Hello5, 10, 5
time_out : 16 : 22 : 02



************2024-04-01 16:21:01.875606**************

Home Function called
extracted data list pair of pl & topic : [['php', 'php syntax'], ['javascript', 'js operators']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit

fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit



************2024-04-01 16:23:01.756755**************

Home Function called
extracted data list pair of pl & topic : []


************2024-04-01 16:24:02.059885**************

Home Function called
extracted data list pair of pl & topic : []


************2024-04-04 12:58:42.812152**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:00:14.486493**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:04:00.321731**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:13:16.324351**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:16:35.011147**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:20:45.257863**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:22:34.818006**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:46:01.314505**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:48:20.519816**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 13:58:35.981014**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 14:15:10.491288**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 14:15:59.263186**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 14:22:25.560868**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 14:26:54.776271**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 14:53:37.389034**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done


************2024-04-04 14:56:36.605204**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Donepl : react
tp : react class
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>React Class Components</h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="react_components.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="react_props.asp">Next ❯</a>
</div>

<hr>

<p>Before React 16.8, Class components were the only way to track state and lifecycle on a React component.
Function components were considered "state-less".</p>

<p>With the addition of Hooks, Function components are now almost equivalent to Class components.
The differences are so minor that you will probably never need to use a Class component in React.</p>

<p>Even though Function components are preferred, there are no current plans on removing Class components from React.</p>

<p>This section will give you an overview of how to use Class components in React.</p>

<div class="w3-note w3-pale-red">
<p>Feel free to skip this section, and use Function Components instead.</p>
</div>

<hr>
<h2>React Components</h2>
<p>Components are independent and reusable bits of code.
They serve the same purpose as JavaScript functions,
but work in isolation and return HTML via a render() function.</p>
<p>Components come in two types, Class components and Function components, in 
this chapter you will learn about Class components.</p>
<hr>
<h2>Create a Class Component</h2>

<p>When creating a React component, the component's name must start with an 
upper case letter.</p>
<p>The component has to include the <code class="w3-codespan">extends React.Component</code> statement, this statement creates an inheritance to 
React.Component, and gives your component access to React.Component's functions.</p>

<p>The component also requires a <code class="w3-codespan">render()</code> method, 
this method returns HTML.</p>

<div class="w3-example">
<h3>Example<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/react/react_server.asp" title="W3Schools Spaces" target="_blank">Get your own React.js Server</a></h3>
<p>Create a Class component called <code class="w3-codespan">Car</code></p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi, I am a Car!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<br>
</div>

<p>Now your React application has a component called Car, which returns a 
<code class="w3-codespan">&lt;h2&gt;</code> element.</p>
<p>To use this component in your application, use similar syntax as normal HTML:
<code class="w3-codespan" style="white-space: nowrap;">&lt;Car /&gt;</code></p>

<div class="w3-example">
<h3>Example</h3>
<p>Display the <code class="w3-codespan">Car</code> component in the "root" element:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_component_class">Run 
Example »</a>
</p>
</div>

<hr>
<div style="position:relative;font-family:'Source Sans Pro', sans-serif;border-radius:5px;color:#FFC0C7;padding:6px 120px 34px 32px;background-color:#282A35;background-color:rgb(13,23,33)">
<a href="https://shop.w3schools.com/collections/course-catalog" target="_blank">
<svg id="w3_cert_badge2" style="position:absolute;top:20px;right:20px;width:100px" data-name="w3_cert_badge2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 300"><defs><style>.cls-1{fill:#04aa6b;}.cls-2{font-size:23px;}.cls-2,.cls-3,.cls-4{fill:#fff;}.cls-2,.cls-3{font-family:RobotoMono-Medium, Roboto Mono;font-weight:500;}.cls-3{font-size:20.08px;}</style></defs><circle class="cls-1" cx="150" cy="150" r="146.47" transform="translate(-62.13 150) rotate(-45)"></circle><text class="cls-2" transform="translate(93.54 63.89) rotate(-29.5)">w</text><text class="cls-2" transform="translate(107.13 56.35) rotate(-20.8)">3</text><text class="cls-2" transform="matrix(0.98, -0.21, 0.21, 0.98, 121.68, 50.97)">s</text><text class="cls-2" transform="translate(136.89 47.84) rotate(-3.47)">c</text><text class="cls-2" transform="translate(152.39 47.03) rotate(5.12)">h</text><text class="cls-2" transform="translate(167.85 48.54) rotate(13.72)">o</text><text class="cls-2" transform="translate(182.89 52.35) rotate(22.34)">o</text><text class="cls-2" transform="matrix(0.86, 0.52, -0.52, 0.86, 197.18, 58.36)">l</text><text class="cls-2" transform="matrix(0.77, 0.64, -0.64, 0.77, 210.4, 66.46)">s</text><text class="cls-3" transform="translate(35.51 186.66) rotate(69.37)"> </text><text class="cls-3" transform="matrix(0.47, 0.88, -0.88, 0.47, 41.27, 201.28)">C</text><text class="cls-3" transform="matrix(0.58, 0.81, -0.81, 0.58, 48.91, 215.03)">E</text><text class="cls-3" transform="matrix(0.67, 0.74, -0.74, 0.67, 58.13, 227.36)">R</text><text class="cls-3" transform="translate(69.16 238.92) rotate(39.44)">T</text><text class="cls-3" transform="matrix(0.85, 0.53, -0.53, 0.85, 81.47, 248.73)">I</text><text class="cls-3" transform="translate(94.94 256.83) rotate(24.36)">F</text><text class="cls-3" transform="translate(109.34 263.09) rotate(16.83)">I</text><text class="cls-3" transform="translate(124.46 267.41) rotate(9.34)">E</text><text class="cls-3" transform="translate(139.99 269.73) rotate(1.88)">D</text><text class="cls-3" transform="translate(155.7 270.01) rotate(-5.58)"> </text><text class="cls-3" transform="translate(171.32 268.24) rotate(-13.06)"> </text><text class="cls-2" transform="translate(187.55 266.81) rotate(-21.04)">.</text><text class="cls-3" transform="translate(203.27 257.7) rotate(-29.24)"> </text><text class="cls-3" transform="translate(216.84 249.83) rotate(-36.75)"> </text><text class="cls-3" transform="translate(229.26 240.26) rotate(-44.15)">2</text><text class="cls-3" transform="translate(240.39 229.13) rotate(-51.62)">0</text><text class="cls-3" transform="translate(249.97 216.63) rotate(-59.17)">2</text><text class="cls-3" transform="matrix(0.4, -0.92, 0.92, 0.4, 257.81, 203.04)">2</text><path class="cls-4" d="M196.64,136.31s3.53,3.8,8.5,3.8c3.9,0,6.75-2.37,6.75-5.59,0-4-3.64-5.81-8-5.81h-2.59l-1.53-3.48,6.86-8.13a34.07,34.07,0,0,1,2.7-2.85s-1.11,0-3.33,0H194.79v-5.86H217.7v4.28l-9.19,10.61c5.18.74,10.24,4.43,10.24,10.92s-4.85,12.3-13.19,12.3a17.36,17.36,0,0,1-12.41-5Z"></path><path class="cls-4" d="M152,144.24l30.24,53.86,14.94-26.61L168.6,120.63H135.36l-13.78,24.53-13.77-24.53H77.93l43.5,77.46.15-.28.16.28Z"></path></svg>
</a>
<h2 style="font-family:'Source Sans Pro';margin-bottom:0!important;font-size:50px!important">
Get Certified!</h2>
<div style="font-size:16px">Complete the React modules, do the exercises, take the exam and become w3schools certified!!</div>
<br>
<a class="ws-btn" style="border-radius:25px;" id="buy_course_btn" href="https://shop.w3schools.com/collections/course-catalog/products/react-js-course" target="_blank">$95 ENROLL</a>
</div>

<hr>

<h2>Component Constructor</h2>

<p>If there is a <code class="w3-codepspan"><code class="w3-codespan">constructor()</code></code> function in your component, this function will be called when the 
component gets initiated.</p>
<p>The constructor function is where you initiate the component's properties.</p>
<p>In React, component properties should be kept in an object called
<code class="w3-codespan">state</code>.</p>
<p>You will learn more about <code class="w3-codespan">state</code> later in 
this tutorial.</p>
<p>The constructor function is also where you honor the inheritance of the 
parent component by including the <code class="w3-codespan">super()</code> 
statement, which executes the parent component's constructor function, and your component has access to all the functions of 
the parent component (<code class="w3-codespan">React.Component</code>).</p>
<div class="w3-example">
  <h3>Example</h3>
<p>Create a constructor function in the Car component, and add a color property:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am a Car!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<br>
</div>

<p>Use the color property in the render() function:</p>

<div class="w3-example">
  <h3>Example</h3>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am a </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token plain-text"> Car!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_component_constructor">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Props</h2>

<p>Another way of handling component properties is by using <code class="w3-codespan">props</code>.</p>

<p>Props are like function arguments, and you send them into the component as attributes.</p>
<p>You will learn more about <code class="w3-codespan">props</code> in the next chapter.</p>
<div class="w3-example">
  <h3>Example</h3>
<p>Use an attribute to pass a color to the Car component, and use it in the 
render() function:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am a </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token plain-text"> Car!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_class_props">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Props in the Constructor</h2>

<p>If your component has a constructor function,
the props should always be passed to the constructor and also to the React.Component via the <code class="w3-codespan">super()</code> method.</p>
<div class="w3-example">
  <h3>Example</h3>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am a </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>model<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mustang<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_component_props2">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Components in Components</h2>

<p>We can refer to components inside other components:</p>

<div class="w3-example">
<h3>Example</h3>
<p>Use the Car component inside the Garage component:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">I am a Car!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-class">class</span> <span class="token class-name">Garage</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Who lives in my Garage?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Garage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_class_components">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Components in Files</h2>

<p>React is all about re-using code, and it can be smart to insert some of your 
components in separate files.</p>

<p>To do that, create a new file with a <code class="w3-codespan">.js</code> 
file extension and put the code inside it:</p>
<p>Note that the file must start by importing React (as before), and it has to 
end with the statement <code class="w3-codespan" style="white-space:nowrap">export default Car;</code>.</p>

<div class="w3-example">
<h3>Example</h3>
<p>This is the new file, we named it <code class="w3-codespan">Car.js</code>:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-import">import</span> React <span class="token keyword keyword-from">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hi, I am a Car!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-export">export</span> <span class="token keyword keyword-default">default</span> Car<span class="token punctuation">;</span>
</code></pre>
<br>
</div>

<p>To be able to use the <code class="w3-codespan">Car</code> component, you have to import the file in your 
application.</p>
<div class="w3-example">
<h3>Example</h3>
<p>Now we import the <code class="w3-codespan">Car.js</code> file in the application, and we can use the 
<code class="w3-codespan">Car</code> 
component as if it was created here.</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-import">import</span> React <span class="token keyword keyword-from">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword keyword-import">import</span> ReactDOM <span class="token keyword keyword-from">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span>
<span class="token keyword keyword-import">import</span> Car <span class="token keyword keyword-from">from</span> <span class="token string">'./Car.js'</span><span class="token punctuation">;</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_class_file">Run 
Example »</a>
</p>

</div>
<hr>

<h2>React Class Component State</h2>
<p>React Class components have a built-in <code class="w3-codespan">state</code> object.</p>

<p>You might have noticed that we used <code class="w3-codespan">state</code> earlier in the component constructor section.</p>

<p>The <code class="w3-codespan">state</code> object is where you store property values that belongs to the component.</p>

<p>When the <code class="w3-codespan">state</code> object changes, the component re-renders.</p>
<hr>

<h2>Creating the state Object</h2>

<p>The state object is initialized in the constructor:</p>

<div class="w3-example">
<h3>Example</h3>
<p>Specify the <code class="w3-codespan">state</code> object in the constructor method:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Car</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>

</div>

<p>The state object can contain as many properties as you like:</p>

<div class="w3-example">
<h3>Example</h3>
<p>Specify all the properties your component need:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"Mustang"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1964</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Car</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</div>
<hr>

<h2>Using the <code class="w3-codespan">state</code> Object</h2>
<p>Refer to the <code class="w3-codespan">state</code> object anywhere in the component by using the
<code class="w3-codespan">this.state.<em>propertyname</em></code> syntax:</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>Refer to the <code class="w3-codespan">state</code> object in the 
  <code class="w3-codespan">render()</code> method:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"Mustang"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1964</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>brand<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          It is a </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token plain-text">
          </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>model<span class="token punctuation">}</span><span class="token plain-text">
          from </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>year<span class="token punctuation">}</span><span class="token plain-text">.
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_state">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Changing the <code class="w3-codespan">state</code> Object</h2>
<p>To change a value in the state object, use the <code class="w3-codespan">this.setState()</code> method.</p>
<p>When a value in the <code class="w3-codespan">state</code> object changes, 
the component will re-render, meaning that the output will change according to 
the new value(s).</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>Add a button with an <code class="w3-codespan">onClick</code> event that 
  will change the color property:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Car</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">"Mustang"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1964</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>brand<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          It is a </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token plain-text">
          </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>model<span class="token punctuation">}</span><span class="token plain-text">
          from </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>year<span class="token punctuation">}</span><span class="token plain-text">.
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>
          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>changeColor<span class="token punctuation">}</span></span>
        <span class="token punctuation">&gt;</span></span><span class="token plain-text">Change color</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_state_setstate">Run 
Example »</a>
</p>
</div>

<div class="w3-panel w3-note">
<p>Always use the <code class="w3-codespan">setState()</code> method to change the state object,
it will ensure that the component knows its been updated and calls the render() method
(and all the other lifecycle methods).</p>
</div>

<hr>

<h2>Lifecycle of Components</h2>

<p>Each component in React has a lifecycle which you can monitor and manipulate during its 
three main phases.</p>
<p>The three phases are: <strong>Mounting</strong>, <strong>Updating</strong>, and
<strong>Unmounting</strong>.</p>

<hr>

<h2>Mounting</h2>
<p>Mounting means putting elements into the DOM.</p>

<p>React has four built-in methods that gets called, in this order, when 
mounting a component:</p>
<ol>
<li><code class="w3-codespan">constructor()</code></li>
<li><code class="w3-codespan">getDerivedStateFromProps()</code></li>
<li><code class="w3-codespan">render()</code></li>
<li><code class="w3-codespan">componentDidMount()</code></li>
</ol>

<p>The <code class="w3-codespan">render()</code> method is required and will 
always be called, the others are optional and will be called if you define them.</p>

<hr>

<h3>constructor</h3>

<p>The <code class="w3-codespan">constructor()</code> method is called before anything else, 
when the component is initiated, and it is the natural 
place to set up the initial <code class="w3-codespan">state</code> and other 
initial values.</p>
<p>The <code class="w3-codespan">constructor()</code> method is called with the 
<code class="w3-codespan">props</code>, as arguments, and you should always 
start by calling the <code class="w3-codespan">super(props)</code> before 
anything else, this will initiate the parent's constructor method and allows the 
component to inherit methods from its parent (<code class="w3-codespan">React.Component</code>).</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>The <code class="w3-codespan">constructor</code> method is called, by 
  React, every time you make a component:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_constructor">Run 
Example »</a>
</p>
</div>

<hr>

<h3>getDerivedStateFromProps</h3>

<p>The <code class="w3-codespan">getDerivedStateFromProps()</code> method is 
called right before rendering the element(s) in the DOM.</p>

<p>This is the natural place to set the <code class="w3-codespan">state</code> object based on the initial 
<code class="w3-codespan">props</code>.
</p><p>It takes <code class="w3-codespan">
state</code> as an argument, and returns an object with changes to the
<code class="w3-codespan">state</code>.</p><p>The example below starts with the favorite color being 
"red", but the
<code class="w3-codespan">
getDerivedStateFromProps()</code> method updates the favorite color based on the
<code class="w3-codespan">favcol</code> attribute:</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>The <code class="w3-codespan">getDerivedStateFromProps</code> method is called 
  right before the render method:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword keyword-static">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> props<span class="token punctuation">.</span>favcol <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token attr-name">favcol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_getderivedstatefromprops">Run 
Example »</a>
</p>
</div>

<hr>

<h3>render</h3>

<p>The <code class="w3-codespan">render()</code> method is required, and is the 
method that actually outputs the HTML to the DOM.</p>

<div class="w3-example">
  <h3>Example:</h3>
  <p>A simple component with a simple <code class="w3-codespan">render()</code> 
  method:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is the content of the Header component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_render">Run 
Example »</a>
</p>
</div>

<hr>

<h3>componentDidMount</h3>

<p>The <code class="w3-codespan">componentDidMount()</code> method is called after the 
component is rendered.</p>

<p>This is where you run statements that requires that the component is already placed in the DOM.</p>

<div class="w3-example">
  <h3>Example:</h3>
  <p>At first my favorite color is red, but give me a second, and it is yellow 
  instead:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"yellow"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_componentdidmount">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Updating</h2> 

<p>The next phase in the lifecycle is when a component is <em>updated</em>.</p>

<p>A component is updated whenever there is a change in the component's
<code class="w3-codespan">state</code> or <code class="w3-codespan">props</code>.</p>

<p>React has five built-in methods that gets called, in this order, when a component 
is updated:</p>
<ol>
<li><code class="w3-codespan">getDerivedStateFromProps()</code></li>
  <li><code class="w3-codespan">shouldComponentUpdate()</code></li>
<li><code class="w3-codespan">render()</code></li>
  <li><code class="w3-codespan">getSnapshotBeforeUpdate()</code></li>
<li><code class="w3-codespan">componentDidUpdate()</code></li>
</ol>
<p>The <code class="w3-codespan">render()</code> method is required and will 
always be called, the others are optional and will be called if you define them.</p>

<hr>
<h3>getDerivedStateFromProps</h3>

<p>Also at <em>updates</em> the <code class="w3-codespan">getDerivedStateFromProps</code> method is 
called. This is the first method that is called when a component gets updated.</p>

<p>This is still the natural place to set the <code class="w3-codespan">state</code> object based on the initial props.


</p><p>The example below has a button that changes the favorite color to blue, but 
since the <code class="w3-codespan">getDerivedStateFromProps()</code> method is called, 
which updates the state with the color from the favcol attribute, the favorite color is 
still 
rendered as yellow:</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>If the component gets updated, the <code class="w3-codespan">getDerivedStateFromProps()</code> method is called:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword keyword-static">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> props<span class="token punctuation">.</span>favcol <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>changeColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Change color</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token attr-name">favcol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_getderivedstatefromprops2">Run 
Example »</a>
</p>
</div>

<hr>
<h3>shouldComponentUpdate</h3>

<p>In the <code class="w3-codespan">shouldComponentUpdate()</code> method
you can return a Boolean value that specifies whether React should continue with the rendering or not.</p>

<p>The default value is <code class="w3-codespan">true</code>.</p>
<p>The example below shows what happens when the <code class="w3-codespan">
shouldComponentUpdate()</code> method returns <code class="w3-codespan">false</code>:</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>Stop the component from rendering at any update:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>changeColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Change color</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_shouldcomponentupdate">Run 
Example »</a>
</p>
</div>

<div class="w3-example">
<h3>Example:</h3>
  <p>Same example as above, but this time the <code class="w3-codespan">shouldComponentUpdate()</code> method returns 
  <code class="w3-codespan">true</code> instead:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>changeColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Change color</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_shouldcomponentupdate2">Run 
Example »</a>
</p>
</div>

<hr>

<h3>render</h3>

<p>The <code class="w3-codespan">render()</code> method is of course called when a component gets <em>updated</em>, 
it has to re-render the HTML to the DOM, with the new changes.</p>

<p>The example below has a button that changes the favorite color to blue:</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>Click the button to make a change in the component's state:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>changeColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Change color</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_render2">Run 
Example »</a>
</p>
</div>

<hr>

<h3>getSnapshotBeforeUpdate</h3>

<p>In the <code class="w3-codespan">getSnapshotBeforeUpdate()</code> method
you have access to the <code class="w3-codespan">props</code> and 
<code class="w3-codespan">state</code> <em>before</em> the update, meaning that 
even after the update, you can check what the values were <em>before</em> the 
update.</p>
<p>If the <code class="w3-codespan">getSnapshotBeforeUpdate()</code> method
is present, you should also include the <code class="w3-codespan">
componentDidUpdate()</code> method, otherwise you will get an error.</p>

<p>The example below might seem complicated, but all it does is this:</p>
<p>When the component is <em>mounting</em> it is rendered with the favorite 
color "red".</p>
<p>When the component <em>has been mounted,</em> a timer changes the state, and 
after one second, the favorite color becomes "yellow".</p>
<p>This action triggers the <em>update</em> phase, and since this component has a <code class="w3-codespan">
getSnapshotBeforeUpdate()</code> method, this method is executed, and writes a 
message to the empty DIV1 element.</p>

<p>Then the <code class="w3-codespan">componentDidUpdate()</code> method is 
executed and writes a message in the empty DIV2 element:</p>

<p>&nbsp;</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>Use the 
  <code class="w3-codespan">getSnapshotBeforeUpdate()</code> method to find out 
  what the <code class="w3-codespan">state</code> object looked like before 
  the update:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"yellow"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>
    <span class="token string">"Before the update, the favorite was "</span> <span class="token operator">+</span> prevState<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>
    <span class="token string">"The updated favorite is "</span> <span class="token operator">+</span> <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_getsnapshotbeforeupdate">Run 
Example »</a>
</p>
</div>

<hr>

<h3>componentDidUpdate</h3>

<p>The <code class="w3-codespan">componentDidUpdate</code> method
is called after the component is updated in the DOM.</p>

<p>The example below might seem complicated, but all it does is this:</p>
<p>When the component is <em>mounting</em> it is rendered with the favorite 
color "red".</p>
<p>When the component <em>has been mounted,</em> a timer changes the state, and 
the color becomes "yellow".</p>
<p>This action triggers the <em>update</em> phase, and since this component has 
a <code class="w3-codespan">componentDidUpdate</code> method, this method is 
executed and writes a message in the empty DIV element:</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>The <code class="w3-codespan">componentDidUpdate</code> method is called 
  after the update has been rendered in the DOM:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Header</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">favoritecolor</span><span class="token operator">:</span> <span class="token string">"yellow"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>
    <span class="token string">"The updated favorite is "</span> <span class="token operator">+</span> <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">My Favorite Color is </span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>favoritecolor<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mydiv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_componentdidupdate">Run 
Example »</a>
</p>
</div>

<hr>

<h2>Unmounting</h2> 

<p>The next phase in the lifecycle is when a component is removed from the DOM, or <em>unmounting</em> as React likes to call it.</p>

<p>React has only one built-in method that gets called when a component is unmounted:</p>
<ul>
<li><code class="w3-codespan">componentWillUnmount()</code></li>
</ul>

<hr>
<h3>componentWillUnmount</h3>

<p>The <code class="w3-codespan">componentWillUnmount</code> method is 
called when the component is about to be removed from the DOM.</p>

<div class="w3-example">
<h3>Example:</h3>
  <p>Click the button to delete the header:</p>
<pre class="w3-white language-jsx" tabindex="0"><code class="language-jsx"><span class="token keyword keyword-class">class</span> <span class="token class-name">Container</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-super">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">delHeader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-this">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-let">let</span> myheader<span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation">(</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>show<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      myheader <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>myheader<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword keyword-this">this</span><span class="token punctuation">.</span>delHeader<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Delete Header</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-class">class</span> <span class="token class-name">Child</span> <span class="token keyword keyword-extends">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"The component named Header is about to be unmounted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword keyword-const">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Container</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="showreact.asp?filename=demo2_react_lifecycle_componentwillunmount">Run 
Example »</a>
</p>
</div>

<hr>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="react_components.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="react_props.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Freact%2Freact_class.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : extends React.Component, render(), Car, class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}, <h2>, <Car />, Car, const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);, constructor(), constructor(), state, state, super(), React.Component, class Car extends React.Component {
  constructor() {
    super();
    this.state = {color: "red"};
  }
  render() {
    return <h2>I am a Car!</h2>;
  }
}, class Car extends React.Component {
  constructor() {
    super();
    this.state = {color: "red"};
  }
  render() {
    return <h2>I am a {this.state.color} Car!</h2>;
  }
}, props, props, class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.color} Car!</h2>;
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);, super(), class Car extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car model="Mustang"/>);, class Car extends React.Component {
  render() {
    return <h2>I am a Car!</h2>;
  }
}

class Garage extends React.Component {
  render() {
    return (
      <div>
      <h1>Who lives in my Garage?</h1>
      <Car />
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Garage />);, .js, export default Car;, Car.js, import React from 'react';

class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}

export default Car;, Car, Car.js, Car, import React from 'react';
import ReactDOM from 'react-dom/client';
import Car from './Car.js';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);, state, state, state, state, state, class Car extends React.Component {
  constructor(props) {
    super(props);
  this.state = {brand: "Ford"};
  }
  render() {
    return (
      <div>
        <h1>My Car</h1>
      </div>
    );
  }
}, class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  render() {
    return (
      <div>
        <h1>My Car</h1>
      </div>
    );
  }
}, state, state, this.state.propertyname, state, render(), class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
      </div>
    );
  }
}, state, this.setState(), state, onClick, class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  changeColor = () => {
    this.setState({color: "blue"});
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
        <button
          type="button"
          onClick={this.changeColor}
        >Change color</button>
      </div>
    );
  }
}, setState(), constructor(), getDerivedStateFromProps(), render(), componentDidMount(), render(), constructor(), state, constructor(), props, super(props), React.Component, constructor, class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, getDerivedStateFromProps(), state, props, state, state, getDerivedStateFromProps(), favcol, getDerivedStateFromProps, class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header favcol="yellow"/>);, render(), render(), class Header extends React.Component {
  render() {
    return (
      <h1>This is the content of the Header component</h1>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, componentDidMount(), class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, state, props, getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate(), componentDidUpdate(), render(), getDerivedStateFromProps, state, getDerivedStateFromProps(), getDerivedStateFromProps(), class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header favcol="yellow" />);, shouldComponentUpdate(), true, shouldComponentUpdate(), false, class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  shouldComponentUpdate() {
    return false;
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, shouldComponentUpdate(), true, class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  shouldComponentUpdate() {
    return true;
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, render(), class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, getSnapshotBeforeUpdate(), props, state, getSnapshotBeforeUpdate(), componentDidUpdate(), getSnapshotBeforeUpdate(), componentDidUpdate(), getSnapshotBeforeUpdate(), state, class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  getSnapshotBeforeUpdate(prevProps, prevState) {
    document.getElementById("div1").innerHTML =
    "Before the update, the favorite was " + prevState.favoritecolor;
  }
  componentDidUpdate() {
    document.getElementById("div2").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
        <h1>My Favorite Color is {this.state.favoritecolor}</h1>
        <div id="div1"></div>
        <div id="div2"></div>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, componentDidUpdate, componentDidUpdate, componentDidUpdate, class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  componentDidUpdate() {
    document.getElementById("mydiv").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <div id="mydiv"></div>
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header />);, componentWillUnmount(), componentWillUnmount, class Container extends React.Component {
  constructor(props) {
    super(props);
    this.state = {show: true};
  }
  delHeader = () => {
    this.setState({show: false});
  }
  render() {
    let myheader;
    if (this.state.show) {
      myheader = <Child />;
    };
    return (
      <div>
      {myheader}
      <button type="button" onClick={this.delHeader}>Delete Header</button>
      </div>
    );
  }
}

class Child extends React.Component {
  componentWillUnmount() {
    alert("The component named Header is about to be unmounted.");
  }
  render() {
    return (
      <h1>Hello World!</h1>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Container />);
time_out : 14 : 57 : 30
pl : sql
tp : sql intro
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1><span class="color_h1">Introduction to</span> SQL</h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="default.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="sql_syntax.asp">Next ❯</a>
</div>
<hr>
<p class="intro">SQL is a standard language for accessing and manipulating databases.</p>
<hr>

<h2>What is SQL?</h2>
<ul>
  <li>SQL stands for Structured Query Language</li>
  <li>SQL lets you access and manipulate databases</li>
  <li>SQL became a standard of the American National Standards Institute (ANSI) 
  in 1986, and of the International Organization for Standardization (ISO) in 
  1987</li>
</ul>
<hr>
<h2>What Can SQL do?</h2>
<ul>
  <li> SQL can execute queries against a database</li>
  <li>SQL can retrieve data from a database</li>
  <li>SQL can insert records in a database</li>
  <li>SQL can update records in a database</li>
  <li>SQL can delete records from a database</li>
  <li>SQL can create new databases</li>
  <li>SQL can create new tables in a database</li>
  <li>SQL can create stored procedures in a database</li>
  <li>SQL can create views in a database</li>
  <li>SQL can set permissions on tables, procedures, and views</li>
</ul>
<hr>
<h2>SQL is a Standard - BUT....</h2>
<p>Although SQL is an ANSI/ISO standard, there are different versions of the SQL language.</p>
<p>However, to be compliant with the ANSI standard, they all support at least the major commands (such as <code class="w3-codespan">
SELECT</code>, <code class="w3-codespan">UPDATE</code>, <code class="w3-codespan">
DELETE</code>, <code class="w3-codespan">INSERT</code>, <code class="w3-codespan">
WHERE</code>) in a similar manner.</p>

<div class="w3-panel w3-note">
<p><b>Note:</b> Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!</p>
</div>
<hr>

<h2>Using SQL in Your Web Site</h2>
<p>To build a web site that shows data from a database, you will need:</p>
<ul>
  <li>An RDBMS database program (i.e. MS Access, SQL Server, MySQL)</li>
  <li>To use a server-side scripting language, like PHP or ASP</li>
  <li>To use SQL to get the data you want</li>
  <li>To use HTML / CSS to style the page</li>
</ul>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>
<h2>RDBMS</h2>
<p>RDBMS stands for Relational Database Management System.</p>
<p>RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.</p>
<p>The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.</p>
<p>Look at the "Customers" table:</p>

<div class="w3-example">
<h3>Example<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/sql/sql_server.asp" title="W3Schools Spaces" target="_blank">Get your own SQL Server</a></h3>
<div class="w3-code notranslate sqlHigh"><span class="sqlcolor" style="color:black">
<span class="sqlkeywordcolor" style="color:mediumblue">SELECT</span> * <span class="sqlkeywordcolor" style="color:mediumblue">FROM</span> Customers;<span class="sqlnumbercolor" style="color:">
</span> </span></div>
<a target="_blank" href="trysql.asp?filename=trysql_select_all" class="w3-btn w3-margin-bottom">Try it Yourself »</a>
</div>

<p>Every table is broken up into smaller entities called fields. The fields in 
the Customers table consist of CustomerID, CustomerName, ContactName, Address, 
City, PostalCode and Country. A field is a column in a table that is designed to maintain 
specific information about every record in the table.</p>
<p>A record, also called a row, is each individual entry that exists in a table. 
For example, there are 91 records in the above Customers table. A record is a 
horizontal entity in a table.</p>
<p>A column is a vertical entity in a table that contains all information 
associated with a specific field in a table.</p>

<br>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="default.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="sql_syntax.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fsql%2Fsql_intro.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : SELECT, UPDATE, DELETE, INSERT, WHERE
time_out : 14 : 57 : 48



************2024-04-04 14:57:11.424115**************

Home Function called
extracted data list pair of pl & topic : [['react', 'react class'], ['sql', 'sql intro']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit

fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit



************2024-04-04 15:10:29.560286**************

Home Function called
extracted data list pair of pl & topic : []


************2024-04-05 17:10:22.640993**************

Home Function called
extracted data list pair of pl & topic : []pl : java
tp : java var
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>Java <span class="color_h1">Variables</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="java_comments.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="java_variables_print.asp">Next ❯</a>
</div>
<hr>

<h2>Java Variables</h2>

<!-- Now that you know how to print text and number values, you should know how to store them, and to use them when you need to.-->
<!-- Now that you know how to print text and number values, you should know how to store and use them whenever needed. -->
<p>Variables are containers for storing data values. </p>
<p>In Java, there are different <strong>types</strong> of variables, for example:</p>
<ul>
 <li><code class="w3-codespan">String</code> - stores text, such as "Hello". String values are 
 surrounded by double quotes</li>
 <li><code class="w3-codespan">int</code> - stores integers (whole numbers), without decimals, such as 123 or -123</li>
 <li><code class="w3-codespan">float</code> - stores floating point numbers, with decimals, such as 19.99 or -19.99</li>
 <li><code class="w3-codespan">char</code> - stores single characters, such as 
 'a' or 'B'. Char values are surrounded by single quotes</li>
 <li><code class="w3-codespan">boolean</code> - stores values with two states: 
 true or false</li>
</ul>
<hr>
<h2>Declaring (Creating) Variables</h2>
<p>To create a variable, you must specify the type and assign it a value:</p>
<div class="w3-example">
<h3>Syntax<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/java/java_server.asp" title="W3Schools Spaces" target="_blank">Get your own Java Server</a></h3>
<pre class="w3-white language-java" style="font-style: italic" tabindex="0"><code class="language-java">type variableName <span class="token operator">=</span> value<span class="token punctuation">;</span>
</code></pre>
</div>
<p>Where <em>type</em> is one of Java's types (such as <code class="w3-codespan">int</code> or <code class="w3-codespan">String</code>), and 
<em>variableName</em> is the name of the variable (such as <strong>x</strong> or
<strong>name</strong>). The <b>equal sign</b> is used to assign values to the variable.</p>
<p>To create a variable that should store text, look at the following example:</p>

<div class="w3-example">
<h3>Example</h3>
<p>Create a variable called <strong>name</strong> of type <code class="w3-codespan">String</code> and assign it the value "<strong>John</strong>":</p>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_variables">Try it Yourself »</a>
</p>
</div>

<p>To create a variable that should store a number, look at the following example:</p>

<div class="w3-example">
<h3>Example</h3>
<p>Create a variable called <strong>myNum</strong> of type <code class="w3-codespan">int</code> and assign it the value <strong>15</strong>:</p>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> myNum <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_variables_int">Try it Yourself »</a>
</p>
</div>

<p>You can also declare a variable without assigning the value, and assign the value later:</p>

<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> myNum<span class="token punctuation">;</span>
myNum <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_variables_int2">Try it Yourself »</a>
</p>
</div>

<p>Note that if you assign a new value to an existing variable, it will overwrite the previous value:</p>
<div class="w3-example">
<h3>Example</h3>
<p>Change the value of <code class="w3-codespan">myNum</code> from <code class="w3-codespan">15</code> to <code class="w3-codespan">20</code>:</p>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> myNum <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
myNum <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">// myNum is now 20</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_variables_ow">Try it Yourself »</a>
</p>
</div>
<hr>

<h2>Final Variables</h2>
<p>If you don't want others (or yourself) to overwrite existing values, use the <code class="w3-codespan">final</code> keyword (this will declare the variable as "final" or "constant", which means unchangeable and read-only):</p>
<div class="w3-example w3-pale-red">
<h3>Example</h3>
<pre class="w3-white w3-border-red language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-final">final</span> <span class="token keyword keyword-int">int</span> myNum <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
myNum <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">// will generate an error: cannot assign a value to a final variable</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_variables_final">Try it Yourself »</a>
</p>
</div>

<hr>

<h2>Other Types</h2>
<p>A demonstration of how to declare variables of other types:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> myNum <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword keyword-float">float</span> myFloatNum <span class="token operator">=</span> <span class="token number">5.99f</span><span class="token punctuation">;</span>
<span class="token keyword keyword-char">char</span> myLetter <span class="token operator">=</span> <span class="token char">'D'</span><span class="token punctuation">;</span>
<span class="token keyword keyword-boolean">boolean</span> myBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> myText <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
</code></pre>
</div>
<div class="w3-note w3-panel">
<p>You will learn more about <a href="java_data_types.asp">data types</a> in the next section.</p>
</div>
<hr>

<div>
<form autocomplete="off" spellcheck="false" id="w3-exerciseform" action="exercise.asp?filename=exercise_variables1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Create a variable named <code class="w3-codespan">carName</code> and assign the value <code class="w3-codespan">Volvo</code> to it.</p>
<div class="exerciseprecontainer">
<pre style="overflow: auto;"><input name="ex1" maxlength="6" style="width: 65px;"> <input name="ex2" maxlength="7" style="width: 74px;"> = <input name="ex3" maxlength="7" style="width: 74px;">;
</pre>
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise.asp?filename=exercise_variables1">Start the Exercise</a></p>
</div>
</form>
</div>
<hr>

<br>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="java_comments.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="java_variables_print.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fjava%2Fjava_variables.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : String, int, float, char, boolean, type variableName = value;, int, String, String, String name = "John";
System.out.println(name);, int, int myNum = 15;
System.out.println(myNum);, int myNum;
myNum = 15;
System.out.println(myNum);, myNum, 15, 20, int myNum = 15;
myNum = 20;  // myNum is now 20
System.out.println(myNum);, final, final int myNum = 15;
myNum = 20;  // will generate an error: cannot assign a value to a final variable, int myNum = 5;
float myFloatNum = 5.99f;
char myLetter = 'D';
boolean myBool = true;
String myText = "Hello";, carName, Volvo
time_out : 17 : 20 : 57
pl : html
tp : html heading
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->
        
        <div id="div-gpt-ad-1422003450156-2">
          <script type="text/javascript">uic_r_f();</script>
        <div id="google_ads_iframe_/16833175/MainLeaderboard_0__container__" style="border: 0pt; width: 728px; height: 0px;"></div></div>

      </div>

<h1>HTML <span class="color_h1">Headings</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="html_attributes.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="html_paragraphs.asp">Next ❯</a>
</div>
<hr>
<p class="intro">HTML headings are titles or subtitles that you want to display on a webpage.</p>
<hr>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-white w3-padding notranslate">
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
</div>
<a class="w3-btn w3-margin-top w3-margin-bottom" href="tryit.asp?filename=tryhtml_headings" target="_blank">Try it Yourself »</a>
</div>

<hr>
<h2>HTML Headings</h2>
<p>HTML headings are defined with the <code class="w3-codespan">&lt;h1&gt;</code> to <code class="w3-codespan">&lt;h6&gt;</code> tags.</p>
<p><code class="w3-codespan">&lt;h1&gt;</code> defines the most important heading. <code class="w3-codespan">&lt;h6&gt;</code> defines the least important heading.</p>
<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate htmlHigh">
<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h1<span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 1<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h1<span class="tagcolor" style="color:mediumblue">&gt;</span></span><br>
<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h2<span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 2<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h2<span class="tagcolor" style="color:mediumblue">&gt;</span></span><br>
<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h3<span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 3<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h3<span class="tagcolor" style="color:mediumblue">&gt;</span></span><br><span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h4<span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 4<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h4<span class="tagcolor" style="color:mediumblue">&gt;</span></span><br><span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h5<span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 5<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h5<span class="tagcolor" style="color:mediumblue">&gt;</span></span><br><span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h6<span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 6<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h6<span class="tagcolor" style="color:mediumblue">&gt;</span></span> </div>
<a target="_blank" href="tryit.asp?filename=tryhtml_headings" class="w3-btn w3-margin-bottom">Try it Yourself »</a>
</div>

<div class="w3-panel w3-note">
  <p><strong>Note:</strong> Browsers automatically add some white space (a margin) before and after a heading.</p>
</div>
<hr>

<h2>Headings Are Important</h2>
<p>Search engines use the headings to index the structure and content of your web pages.</p>
<p>Users often skim a page by its headings. It is important to use headings to show the document structure.</p>
<p><code class="w3-codespan">&lt;h1&gt;</code> headings should be used for main headings, followed by <code class="w3-codespan">&lt;h2&gt;</code> headings, then the less important 
<code class="w3-codespan">&lt;h3&gt;</code>, and so on.</p>
<div class="w3-panel w3-note">
  <p><strong>Note:</strong> Use HTML headings for headings only. Don't use headings to make text 
  <strong>BIG</strong> or <strong>bold</strong>.</p>
</div>
<hr>
<h2>Bigger Headings</h2>

<p>Each HTML heading has a default size. However, you can specify the size for any heading 
with the <code class="w3-codespan">style</code> attribute, using the CSS <code class="w3-codespan">font-size</code> property:</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate htmlHigh">
<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>h1<span class="attributecolor" style="color:red"> 
  style<span class="attributevaluecolor" style="color:mediumblue">="font-size:60px;"</span></span><span class="tagcolor" style="color:mediumblue">&gt;</span></span>Heading 1<span class="tagnamecolor" style="color:brown"><span class="tagcolor" style="color:mediumblue">&lt;</span>/h1<span class="tagcolor" style="color:mediumblue">&gt;</span></span><br>
   </div>
<a target="_blank" href="tryit.asp?filename=tryhtml_headings_size" class="w3-btn w3-margin-bottom">Try it Yourself »</a>
</div>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->
        
  <div id="div-gpt-ad-1493883843099-0" style="display: inline-block">
    <script>
    uic_r_g();
    </script>
  <div id="google_ads_iframe_/16833175/MidContent_0__container__" style="border: 0pt; width: 728px; height: 0px;"></div></div>
  
</div>
<hr>
<h2>HTML Exercises</h2>
<form autocomplete="off" id="w3-exerciseform" action="exercise.asp?filename=exercise_html_headings1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Use the correct HTML tag to add a heading with the text "London".</p>
<div class="exerciseprecontainer">
<input name="ex1" maxlength="15" style="width: 155px;">
<br>
<br>
&lt;p&gt;London is the capital city of England.
It is the most populous city in the United Kingdom,
with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise.asp?filename=exercise_html_headings1">Start the Exercise</a></p>
</div>
</form>
<hr>

<h2>HTML Tag Reference</h2>
<p>W3Schools' tag reference contains additional information about these tags and their attributes.</p>
<table class="ws-table-all notranslate">
<tbody><tr>
  <th>Tag</th>
  <th>Description</th>
</tr>
<tr>
  <td><a href="/tags/tag_html.asp">&lt;html&gt;</a></td>
  <td>Defines the root of an HTML document</td>
</tr>
<tr>
  <td><a href="/tags/tag_body.asp">&lt;body&gt;</a></td>
  <td>Defines the document's body</td>
</tr>
<tr>
  <td><a href="/tags/tag_hn.asp">&lt;h1&gt; to &lt;h6&gt;</a></td>
  <td>Defines HTML headings</td>
</tr>
</tbody></table>

<div class="w3-note w3-panel">
  <p>For a complete list of all available HTML tags, visit our <a href="/tags/default.asp">HTML Tag Reference</a>.</p>
</div>

<hr>
<h2 style="max-width:720px;position:relative;margin:auto;text-decoration: none;text-align:center">Video: HTML Headings</h2>
<a href="https://youtu.be/9gHPpwq6IaY&amp;list=PLP9IO4UYNF0VdAajP_5pYG-jG2JRrG72s" class="ga-featured ga-youtube" target="blank_">
  
  <div id="yt_container" style="max-width:720px;position:relative;margin:auto;">
    <div style="position:absolute;top:40%;text-align: center;margin:auto;">
      <img style="width:40%;" src="images/yt_logo_rgb_dark.png">
    </div>
    <img id="yt_div" style="max-width:100%;height:auto;border-radius:6px" src="images/05_html_headings.png">
  </div>
</a>

<br>
<hr>

<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="html_attributes.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="html_paragraphs.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fhtml%2Fhtml_headings.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : <h1>, <h6>, <h1>, <h6>, <h1>, <h2>, <h3>, style, font-size
time_out : 17 : 21 : 13



************2024-04-05 17:20:42.362044**************

Home Function called
extracted data list pair of pl & topic : [['java', 'java var'], ['html', 'html heading']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit

fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit
pl : Python
tp : Python var
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>Python <span class="color_h1">Variables</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="python_comments.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="python_variables_names.asp">Next ❯</a>
</div>
<hr>

<h2>Varia<span onclick="test_darkmode(1)">b</span>l<span onclick="test_darkmode(2)">e</span><span onclick="test_darkmode(3)">s</span></h2>
<p>Variables are containers for storing data values.</p>
<hr>
<h2>Creating Variables</h2>
<p>Python has no command for declaring a variable.</p>

<p>A variable is created the moment you first assign a value to it.</p>

<div class="w3-example">
<h3>Example<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/python/python_server.asp" title="W3Schools Spaces" target="_blank">Get your own Python Server</a></h3>
<div class="w3-code notranslate pythonHigh"><span class="pythoncolor" style="color:black">
x = <span class="pythonnumbercolor" style="color:red">5</span><br>
y = <span class="pythonstringcolor" style="color:brown">"John"</span><br>
<span class="pythonkeywordcolor" style="color:mediumblue">print</span>(x)<br>
<span class="pythonkeywordcolor" style="color:mediumblue">print</span>(y)<span class="pythonnumbercolor" style="color:red">
</span> </span></div>
<a target="_blank" class="w3-btn w3-margin-bottom" href="trypython.asp?filename=demo_variables1">Try it Yourself »</a>
</div>

<p>Variables do not need to be declared with any particular <em>type</em>, and can even change type after they have been set.</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate pythonHigh"><span class="pythoncolor" style="color:black">
x = <span class="pythonnumbercolor" style="color:red">4</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="commentcolor" style="color:green"># x is of type int<br></span>
x = <span class="pythonstringcolor" style="color:brown">"Sally"</span> <span class="commentcolor" style="color:green"># x is now of type str<br></span>
<span class="pythonkeywordcolor" style="color:mediumblue">print</span>(x)<span class="pythonnumbercolor" style="color:red">
</span> </span></div>
<a target="_blank" class="w3-btn w3-margin-bottom" href="trypython.asp?filename=demo_variables2">Try it Yourself »</a>
</div>

<hr>
<h2>Casting</h2>

<p>If you want to specify the data type of a variable, this can be done with casting.</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate pythonHigh"><span class="pythoncolor" style="color:black">
x = <span class="pythonnumbercolor" style="color:red">
</span>  <span class="pythonkeywordcolor" style="color:mediumblue">str</span>(<span class="pythonnumbercolor" style="color:red">3</span>)&nbsp;&nbsp;&nbsp; <span class="commentcolor" style="color:green"># x will be '3'<br></span>y = <span class="pythonkeywordcolor" style="color:mediumblue">int</span>(<span class="pythonnumbercolor" style="color:red">3</span>)&nbsp;&nbsp;&nbsp; <span class="commentcolor" style="color:green"># y 
  will be 3<br></span>z = <span class="pythonkeywordcolor" style="color:mediumblue">float</span>(<span class="pythonnumbercolor" style="color:red">3</span>)&nbsp; <span class="commentcolor" style="color:green"># z will be 3.0 </span></span></div>
<a target="_blank" class="w3-btn w3-margin-bottom" href="trypython.asp?filename=demo_variables_casting">Try it Yourself »</a>
</div>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>

<h2>Get the Type</h2>

<p>You can get the data type of a variable with the <code class="w3-codespan">type()</code> function.</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate pythonHigh"><span class="pythoncolor" style="color:black"><span class="pythonnumbercolor" style="color:red">
</span>  x = <span class="pythonnumbercolor" style="color:red">5</span><br>y = <span class="pythonstringcolor" style="color:brown">"John"</span><br><span class="pythonkeywordcolor" style="color:mediumblue">print</span>(<span class="pythonkeywordcolor" style="color:mediumblue">type</span>(x))<br><span class="pythonkeywordcolor" style="color:mediumblue">print</span>(<span class="pythonkeywordcolor" style="color:mediumblue">type</span>(y)) </span></div>
<a target="_blank" class="w3-btn w3-margin-bottom" href="trypython.asp?filename=demo_variables_type">Try it Yourself »</a>
</div>

<div class="w3-note w3-panel">You will learn more about 
  <a href="python_datatypes.asp">data types</a> and
  <a href="python_casting.asp">casting</a> later in this tutorial.</div>

<hr>

<h2>Single or Double Quotes?</h2>

<p>String variables can be declared either by using single or double quotes:</p>

<div class="w3-example">
<h3>Example</h3>
<div class="w3-code notranslate pythonHigh"><span class="pythoncolor" style="color:black">
x = <span class="pythonstringcolor" style="color:brown">"John"</span><br><span class="commentcolor" style="color:green"># is the same as<br></span>x = <span class="pythonnumbercolor" style="color:red">
</span>  <span class="pythonstringcolor" style="color:brown">'John'</span><span class="pythonnumbercolor" style="color:red">
</span> </span></div>
<a target="_blank" class="w3-btn w3-margin-bottom" href="trypython.asp?filename=demo_variables7">Try it Yourself »</a>
</div>

<hr>

<h2>Case-Sensitive</h2>

<p>Variable names are case-sensitive.</p>

<div class="w3-example">
<h3>Example</h3>
<p>This will create two variables:</p>
<div class="w3-code notranslate pythonHigh"><span class="pythoncolor" style="color:black"><span class="pythonnumbercolor" style="color:red">
</span>  a = <span class="pythonnumbercolor" style="color:red">4</span><br>A = <span class="pythonnumbercolor" style="color:red">
</span>  <span class="pythonstringcolor" style="color:brown">"Sally"</span><br><span class="commentcolor" style="color:green">#A will not overwrite a </span></span></div>
<a target="_blank" class="w3-btn w3-margin-bottom" href="trypython.asp?filename=demo_variables_cs">Try it Yourself »</a>
</div>


<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="python_comments.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="python_variables_names.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fpython%2Fpython_variables.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : type()
time_out : 17 : 23 : 25



************2024-04-05 17:23:11.453646**************

Home Function called
extracted data list pair of pl & topic : [['Python', 'Python var']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit
pl : java
tp : java operators
html data : 
      <div id="mainLeaderboard" style="overflow:hidden;">
        <!-- MainLeaderboard-->

        <!--<pre>main_leaderboard, all: [728,90][970,90][320,50][468,60]</pre>-->
        <div id="adngin-main_leaderboard-0"></div>
        <!-- adspace leaderboard -->

      </div>

<h1>Java <span class="color_h1">Operators</span></h1>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="java_type_casting.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="java_strings.asp">Next ❯</a>
</div>
<hr>

<h2>Java Operators</h2>

<p>Operators are used to perform operations on variables and values.</p>
<p>In the example below, we use the
<code class="w3-codespan">+</code> <strong>operator</strong> to add together two values:</p>
<div class="w3-example">
<h3>Example<a class="ws-black ws-hover-black spaces-tryit ga-featured" href="/java/java_server.asp" title="W3Schools Spaces" target="_blank">Get your own Java Server</a></h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_oper">Try it Yourself »</a>
</p>
</div>

<p>Although the <code class="w3-codespan">+</code> operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> sum1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment">// 150 (100 + 50)</span>
<span class="token keyword keyword-int">int</span> sum2 <span class="token operator">=</span> sum1 <span class="token operator">+</span> <span class="token number">250</span><span class="token punctuation">;</span>      <span class="token comment">// 400 (150 + 250)</span>
<span class="token keyword keyword-int">int</span> sum3 <span class="token operator">=</span> sum2 <span class="token operator">+</span> sum2<span class="token punctuation">;</span>     <span class="token comment">// 800 (400 + 400)</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_oper2">Try it Yourself »</a>
</p>
</div>

<p>Java divides the operators into the following groups:</p>
<ul>
	<li>Arithmetic operators</li>
	<li>Assignment operators</li>
	<li>Comparison operators</li>
	<li>Logical operators</li>
	<li>Bitwise operators</li>
</ul>
<hr>

<h2>Arithmetic Operators</h2>

<p>Arithmetic operators are used to perform common mathematical operations.</p>
<div class="w3-responsive">
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:15%">Operator</th>
<th style="width:18%">Name</th>
<th style="width:40%">Description</th>
<th style="width:17%;">Example</th>
<th style="width:10%">Try it</th>
</tr>
<tr>
<td>+</td>
<td>Addition</td>
<td>Adds together two values</td>
<td>x + y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_add">Try it »</a></td>
</tr>
<tr>
<td>-</td>
<td>Subtraction</td>
<td>Subtracts one value from another</td>
<td>x - y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_sub">Try it »</a></td>
</tr>
<tr>
<td>*</td>
<td>Multiplication</td>
<td>Multiplies two values</td>
<td>x * y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_mult">Try it »</a></td>
</tr>
<tr>
<td>/</td>
<td>Division</td>
<td>Divides one value by another</td>
<td>x / y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_div">Try it »</a></td>
</tr>
<tr>
<td>%</td>
<td>Modulus</td>
<td>Returns the division remainder</td>
<td>x % y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_mod">Try it »</a></td>
</tr>
<tr>
<td>++</td>
<td>Increment</td>
<td>Increases the value of a variable by 1</td>
<td>++x</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_inc">Try it »</a></td>
</tr>
<tr>
<td>--</td>
<td>Decrement</td>
<td>Decreases the value of a variable by 1</td>
<td>--x</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_dec">Try it »</a></td>
</tr>
</tbody>
</table>
</div>
<hr>
<div id="midcontentadcontainer" style="overflow:auto;text-align:center">
<!-- MidContent -->
<!-- <p class="adtext">Advertisement</p> -->

  <div id="adngin-mid_content-0"></div>
  
</div>
<hr>

<h2>Java Assignment Operators</h2>

<p>Assignment operators are used to assign values to variables.</p>
<p>In the example below, we use the <strong>assignment</strong> operator (<code class="w3-codespan">=</code>) 
to assign the value <strong>10</strong> to a variable called <strong>x</strong>:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a class="w3-btn" href="tryjava.asp?filename=demo_oper_assignment1" target="_blank">Try it Yourself »</a>
</p>
</div>
<p>The <strong>addition assignment</strong> operator (<code class="w3-codespan">+=</code>) adds a value to a variable:</p>
<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
x <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre>
<p>
<a class="w3-btn" href="tryjava.asp?filename=demo_oper_assignment2" target="_blank">Try it Yourself »</a>
</p>
</div>
<p>A list of all assignment operators:</p>
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:30%">Operator</th>
<th style="width:30%">Example</th>
<th style="width:30%">Same As</th>
<th style="width:10%;">Try it</th>
</tr>
<tr>
<td>=</td>
<td>x = 5</td>
<td>x = 5</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass1">Try it »</a></td>
</tr>
  <tr>
<td>+=</td>
<td>x += 3</td>
<td>x = x + 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass2">Try it »</a></td>
  </tr>
  <tr>
<td>-=</td>
<td>x -= 3</td>
<td>x = x - 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass3">Try it »</a></td>
  </tr>
  <tr>
<td>*=</td>
<td>x *= 3</td>
<td>x = x * 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass4">Try it »</a></td>
  </tr>
  <tr>
<td>/=</td>
<td>x /= 3</td>
<td>x = x / 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass5">Try it »</a></td>
  </tr>
  <tr>
<td>%=</td>
<td>x %= 3</td>
<td>x = x % 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass6">Try it »</a></td>
  </tr>
  <tr>
<td>&amp;=</td>
<td>x &amp;= 3</td>
<td>x = x &amp; 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass7">Try it »</a></td>
  </tr>
  <tr>
<td>|=</td>
<td>x |= 3</td>
<td>x = x | 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass8">Try it »</a></td>
  </tr>
<tr>
<td>^=</td>
<td>x ^= 3</td>
<td>x = x ^ 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass9">Try it »</a></td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>x &gt;&gt;= 3</td>
<td>x = x &gt;&gt; 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass10">Try it »</a></td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>x &lt;&lt;= 3</td>
<td>x = x &lt;&lt; 3</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_ass11">Try it »</a></td>
</tr>
</tbody></table>

<hr>

<h2>Java Comparison Operators</h2>

<p>Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.</p>

<p>The return value of a comparison is either <code class="w3-codespan">true</code> or <code class="w3-codespan">false</code>. These values are known as 
<em>Boolean values</em>, and you will learn more about them in the <a href="java_booleans.asp">Booleans</a> and <a href="java_conditions.asp">If..Else</a> chapter.</p>

<p>In the following example, we use the <strong>greater than</strong> operator (<code class="w3-codespan">&gt;</code>) to find out if 5 is greater than 3:</p>

<div class="w3-example">
<h3>Example</h3>
<pre class="w3-white language-java" tabindex="0"><code class="language-java"><span class="token keyword keyword-int">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns true, because 5 is higher than 3</span>
</code></pre>
<p>
<a target="_blank" class="w3-btn" href="tryjava.asp?filename=demo_oper_comparison">Try it Yourself »</a>
</p>
</div>


<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:25%">Operator</th>
<th style="width:35%">Name</th>
<th style="width:30%">Example</th>
<th style="width:10%">Try it</th>
</tr>
<tr>
<td>==</td>
<td>Equal to</td>
<td>x == y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare1">Try it »</a></td>
</tr>
<tr>
<td>!=</td>
<td>Not equal</td>
<td>x != y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare2">Try it »</a></td>
</tr>
<tr>
<td>&gt;</td>
<td>Greater than</td>
<td>x &gt; y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare3">Try it »</a></td>
</tr>
<tr>
<td>&lt;</td>
<td>Less than</td>
<td>x &lt; y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare4">Try it »</a></td>
</tr>
  <tr>
<td>&gt;=</td>
<td>Greater than or equal to</td>
<td>x &gt;= y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare5">Try it »</a></td>
  </tr>
<tr>
<td>&lt;=</td>
<td>Less than or equal to</td>
<td>x &lt;= y</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_compare6">Try it »</a></td>
</tr>
</tbody></table>
<hr>

<h2>Java Logical Operators</h2>

<p>You can also test for <code class="w3-codespan">true</code> or <code class="w3-codespan">false</code> 
values with logical operators.</p>
<p>Logical operators are used to determine the logic between variables or 
values:</p>
<div class="w3-responsive" style="margin-top:-16px;margin-bottom:-16px">

<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:15%">Operator</th>
<th style="width:20%">Name</th>
<th style="width:35%">Description</th>
<th style="width:20%">Example</th>
<th style="width:10%">Try it</th>
</tr>
<tr>
<td>&amp;&amp;&nbsp;</td>
<td>Logical and</td>
<td>Returns true if both statements are true</td>
<td>x &lt; 5 &amp;&amp;&nbsp; x &lt; 10</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_logical1">Try it »</a></td>
</tr>
<tr>
<td>||&nbsp;</td>
<td>Logical or</td>
<td>Returns true if one of the statements is true</td>
<td>x &lt; 5 || x &lt; 4</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_logical2">Try it »</a></td>
</tr>
<tr>
<td>!</td>
<td>Logical not</td>
<td>Reverse the result, returns false if the result is true</td>
<td>!(x &lt; 5 &amp;&amp; x &lt; 10)</td>
<td><a target="_blank" class="w3-btn btnsmall btnsmall" href="tryjava.asp?filename=demo_oper_logical3">Try it »</a></td>
</tr>
</tbody></table>
</div>
<!--

<h2>Java Bitwise Operators</h2>
<p>Bitwise operators are used to perform binary logic with the bits of an integer or long
integer.</p>
<div class="w3-responsive" style="margin-top:-16px;margin-bottom:-16px">
<table class="ws-table-all notranslate">
<tbody><tr>
<th style="width:12%">Operator</th>
<th style="width:40%">Description</th>
<th>Example</th>
<th>Same as</th>
<th>Result</th>
<th>Decimal</th>
</tr>
<tr>
<td>&amp;</td>
<td>AND - Sets each bit to 1 if both bits are 1</td>
<td>5 &amp; 1</td>
<td>0101 &amp; 0001</td>
<td>0001</td>
<td>&nbsp;1</td>
</tr>
<tr>
<td>|</td>
<td>OR - Sets each bit to 1 if any of the two bits is 1</td>
<td>5 | 1</td>
<td>0101 | 0001</td>
<td>0101</td>
<td>&nbsp;5</td>
</tr>
<tr>
<td>~</td>
<td>NOT - Inverts all the bits</td>
<td>~ 5</td>
<td>&nbsp;~0101</td>
<td>1010</td>
<td>&nbsp;10</td>
</tr>
<tr>
<td>^</td>
<td>XOR - Sets each bit to 1 if only one of the two bits is 1</td>
<td>5 ^ 1</td>
<td>0101 ^ 0001</td>
<td>0100</td>
<td>&nbsp;4</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>Zero-fill left shift - Shift left by pushing zeroes in from the right and letting the leftmost bits fall off</td>
<td>9 &lt;&lt; 1</td>
<td>1001 &lt;&lt; 1</td>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>Signed right shift - Shift right by pushing copies of the leftmost bit in from the left and letting the rightmost bits fall off</td>
<td>9 &gt;&gt; 1</td>
<td>1001 &gt;&gt; 1</td>
<td>1100</td>
<td>12</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>Zero-fill right shift - Shift right by pushing zeroes in from the left and letting the rightmost bits fall off</td>
<td>9 &gt;&gt;&gt; 1</td>
<td>1001 &gt;&gt;&gt; 1</td>
<td>0100</td>
<td>4</td>
</tr>
</tbody></table>
</div>

<div class="w3-note w3-panel">
<p><strong>Note:</strong> The Bitwise examples above use 4-bit unsigned examples, but Java uses 32-bit signed integers
and 64-bit signed long integers.
Because of this, in Java, ~5 will not return 10. It will return -6.
~00000000000000000000000000000101 will return 11111111111111111111111111111010</p>

<p>In Java, 9 &gt;&gt; 1 will not return 12. It will return 4.
00000000000000000000000000001001 &gt;&gt; 1 will return
00000000000000000000000000000100</p>
</div>
-->

<hr>

<div>
<form autocomplete="off" spellcheck="false" id="w3-exerciseform" action="exercise.asp?filename=exercise_operators1" method="post" target="_blank">
<h2>Test Yourself With Exercises</h2>
<div class="exercisewindow">
<h2>Exercise:</h2>
<p>Multiply <code class="w3-codespan">10</code> with <code class="w3-codespan">5</code>, and print the result.</p>
<div class="exerciseprecontainer">
<pre style="overflow: auto;">System.out.println(10 <input name="ex1" maxlength="1" style="width: 15px;"> 5);
</pre>
</div>
<br>
<button type="submit" class="w3-btn w3-margin-bottom">Submit Answer »</button>
<p><a target="_blank" href="exercise.asp?filename=exercise_operators1">Start the Exercise</a></p>
</div>
</form>
</div>

<br>
<div class="w3-clear nextprev">
<a class="w3-left w3-btn" href="java_type_casting.asp">❮ Previous</a>
<a class="w3-right w3-btn" href="java_strings.asp">Next ❯</a>
</div>
<div id="user-profile-bottom-wrapper" class="user-profile-bottom-wrapper">
  <div class="user-authenticated w3-hide">
    <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fwww.w3schools.com%2Fjava%2Fjava_operators.asp" class="user-profile-btn ga-bottom ga-bottom-profile" title="Your W3Schools Profile" aria-label="Your W3Schools Profile" target="_top">
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 2048 2048" class="user-profile-icon" aria-label="Your W3Schools Profile Icon">
        <path d="M 843.500 1148.155 C 837.450 1148.515, 823.050 1149.334, 811.500 1149.975 C 742.799 1153.788, 704.251 1162.996, 635.391 1192.044 C 517.544 1241.756, 398.992 1352.262, 337.200 1470 C 251.831 1632.658, 253.457 1816.879, 340.500 1843.982 C 351.574 1847.431, 1696.426 1847.431, 1707.500 1843.982 C 1794.543 1816.879, 1796.169 1632.658, 1710.800 1470 C 1649.008 1352.262, 1530.456 1241.756, 1412.609 1192.044 C 1344.588 1163.350, 1305.224 1153.854, 1238.500 1150.039 C 1190.330 1147.286, 1196.307 1147.328, 1097 1149.035 C 1039.984 1150.015, 1010.205 1150.008, 950 1149.003 C 851.731 1147.362, 856.213 1147.398, 843.500 1148.155" stroke="none" fill="#2a93fb" fill-rule="evenodd"></path>
        <path d="M 1008 194.584 C 1006.075 194.809, 999.325 195.476, 993 196.064 C 927.768 202.134, 845.423 233.043, 786 273.762 C 691.987 338.184, 622.881 442.165, 601.082 552 C 588.496 615.414, 592.917 705.245, 611.329 760.230 C 643.220 855.469, 694.977 930.136, 763.195 979.321 C 810.333 1013.308, 839.747 1026.645, 913.697 1047.562 C 1010.275 1074.879, 1108.934 1065.290, 1221 1017.694 C 1259.787 1001.221, 1307.818 965.858, 1339.852 930.191 C 1460.375 795.998, 1488.781 609.032, 1412.581 451.500 C 1350.098 322.327, 1240.457 235.724, 1097.500 202.624 C 1072.356 196.802, 1025.206 192.566, 1008 194.584" stroke="none" fill="#0aaa8a" fill-rule="evenodd"></path>
      </svg>

      <svg xmlns="http://www.w3.org/2000/svg" class="user-progress" aria-label="Your W3Schools Profile Progress">
        <path class="user-progress-circle1" fill="none" d="M 25.99650934151373 15.00000030461742 A 20 20 0 1 0 26 15"></path>
        <path class="user-progress-circle2" fill="none" d="M 26 15 A 20 20 0 0 0 26 15"></path>
      </svg>

      <span class="user-progress-star">★</span>

      <span class="user-progress-point">+1</span>
    </a>
  </div>

  <div class="w3s-pathfinder -teaser user-anonymous">
  <div class="-background-image -variant-t2">&nbsp;</div>

  <div class="-inner-wrapper">
    <div class="-main-section">
      <div class="-inner-wrapper">
        <div class="-title">W3schools Pathfinder</div>

        <div class="-headline">Track your progress - it's free!</div>
      
        <div class="-body">
          <div class="-progress-bar">
            <div class="-slider" style="width: 20%;">&nbsp;</div>    
          </div>
        </div>
      </div>
    </div>

    <div class="-right-side-section">
      <div class="-user-session-btns">
        <a href="https://profile.w3schools.com/log-in?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-login-btn w3-btn bar-item-hover w3-right ws-light-green ga-bottom ga-bottom-login" title="Login to your account" aria-label="Login to your account" target="_top">
          Log in
        </a>

        <a href="https://profile.w3schools.com/sign-up?redirect_url=https%3A%2F%2Fpathfinder.w3schools.com" data-skip-href-patch="true" class="-signup-btn w3-button w3-right ws-green ws-hover-green ga-bottom ga-bottom-signup" title="Sign Up to Improve Your Learning Experience" aria-label="Sign Up to Improve Your Learning Experience" target="_top">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</div>

</div>


examples : +, int x = 100 + 50;, +, int sum1 = 100 + 50;        // 150 (100 + 50)
int sum2 = sum1 + 250;      // 400 (150 + 250)
int sum3 = sum2 + sum2;     // 800 (400 + 400), =, int x = 10;, +=, int x = 10;
x += 5;, true, false, >, int x = 5;
int y = 3;
System.out.println(x > y); // returns true, because 5 is higher than 3, true, false, 10, 5
time_out : 17 : 37 : 26



************2024-04-05 17:35:29.460103**************

Home Function called
extracted data list pair of pl & topic : [['java', 'java operators']]
fetch_data Function called 

headless options run success
driver created and URL get
Time Out Done
Database Updated !!!
driver quit
